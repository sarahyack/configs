/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";var wo=Object.create;var Te=Object.defineProperty;var yo=Object.getOwnPropertyDescriptor;var bo=Object.getOwnPropertyNames;var To=Object.getPrototypeOf,Eo=Object.prototype.hasOwnProperty;var _o=(e,t,r)=>t in e?Te(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r;var ar=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),vo=(e,t)=>{for(var r in t)Te(e,r,{get:t[r],enumerable:!0})},cr=(e,t,r,s)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of bo(t))!Eo.call(e,o)&&o!==r&&Te(e,o,{get:()=>t[o],enumerable:!(s=yo(t,o))||s.enumerable});return e};var nt=(e,t,r)=>(r=e!=null?wo(To(e)):{},cr(t||!e||!e.__esModule?Te(r,"default",{value:e,enumerable:!0}):r,e)),ko=e=>cr(Te({},"__esModule",{value:!0}),e);var E=(e,t,r)=>_o(e,typeof t!="symbol"?t+"":t,r);var Or=ar((xa,_e)=>{"use strict";var Fe=function(){};Fe.prototype=Object.create(null);var Ce=/; *([!#$%&'*+.^\w`|~-]+)=("(?:[\v\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\v\u0020-\u00ff])*"|[!#$%&'*+.^\w`|~-]+) */gu,De=/\\([\v\u0020-\u00ff])/gu,_r=/^[!#$%&'*+.^\w|~-]+\/[!#$%&'*+.^\w|~-]+$/u,se={type:"",parameters:new Fe};Object.freeze(se.parameters);Object.freeze(se);function vr(e){if(typeof e!="string")throw new TypeError("argument header is required and must be a string");let t=e.indexOf(";"),r=t!==-1?e.slice(0,t).trim():e.trim();if(_r.test(r)===!1)throw new TypeError("invalid media type");let s={type:r.toLowerCase(),parameters:new Fe};if(t===-1)return s;let o,n,i;for(Ce.lastIndex=t;n=Ce.exec(e);){if(n.index!==t)throw new TypeError("invalid parameter format");t+=n[0].length,o=n[1].toLowerCase(),i=n[2],i[0]==='"'&&(i=i.slice(1,i.length-1),De.test(i)&&(i=i.replace(De,"$1"))),s.parameters[o]=i}if(t!==e.length)throw new TypeError("invalid parameter format");return s}function kr(e){if(typeof e!="string")return se;let t=e.indexOf(";"),r=t!==-1?e.slice(0,t).trim():e.trim();if(_r.test(r)===!1)return se;let s={type:r.toLowerCase(),parameters:new Fe};if(t===-1)return s;let o,n,i;for(Ce.lastIndex=t;n=Ce.exec(e);){if(n.index!==t)return se;t+=n[0].length,o=n[1].toLowerCase(),i=n[2],i[0]==='"'&&(i=i.slice(1,i.length-1),De.test(i)&&(i=i.replace(De,"$1"))),s.parameters[o]=i}return t!==e.length?se:s}_e.exports.default={parse:vr,safeParse:kr};_e.exports.parse=vr;_e.exports.safeParse=kr;_e.exports.defaultContentType=se});var _t=ar((Tt,Et)=>{(function(e,t){typeof Tt=="object"&&typeof Et!="undefined"?Et.exports=t():typeof define=="function"&&define.amd?define(t):e.Bottleneck=t()})(Tt,function(){"use strict";var e=typeof globalThis!="undefined"?globalThis:typeof window!="undefined"?window:typeof global!="undefined"?global:typeof self!="undefined"?self:{};function t(T){return T&&T.default||T}var r=function(T,l,a={}){var d,h,g;for(d in l)g=l[d],a[d]=(h=T[d])!=null?h:g;return a},s=function(T,l,a={}){var d,h;for(d in T)h=T[d],l[d]!==void 0&&(a[d]=h);return a},o={load:r,overwrite:s},n;n=class{constructor(l,a){this.incr=l,this.decr=a,this._first=null,this._last=null,this.length=0}push(l){var a;this.length++,typeof this.incr=="function"&&this.incr(),a={value:l,prev:this._last,next:null},this._last!=null?(this._last.next=a,this._last=a):this._first=this._last=a}shift(){var l;if(this._first!=null)return this.length--,typeof this.decr=="function"&&this.decr(),l=this._first.value,(this._first=this._first.next)!=null?this._first.prev=null:this._last=null,l}first(){if(this._first!=null)return this._first.value}getArray(){var l,a,d;for(l=this._first,d=[];l!=null;)d.push((a=l,l=l.next,a.value));return d}forEachShift(l){var a;for(a=this.shift();a!=null;)l(a),a=this.shift()}debug(){var l,a,d,h,g;for(l=this._first,g=[];l!=null;)g.push((a=l,l=l.next,{value:a.value,prev:(d=a.prev)!=null?d.value:void 0,next:(h=a.next)!=null?h.value:void 0}));return g}};var i=n,c;c=class{constructor(l){if(this.instance=l,this._events={},this.instance.on!=null||this.instance.once!=null||this.instance.removeAllListeners!=null)throw new Error("An Emitter already exists for this object");this.instance.on=(a,d)=>this._addListener(a,"many",d),this.instance.once=(a,d)=>this._addListener(a,"once",d),this.instance.removeAllListeners=(a=null)=>a!=null?delete this._events[a]:this._events={}}_addListener(l,a,d){var h;return(h=this._events)[l]==null&&(h[l]=[]),this._events[l].push({cb:d,status:a}),this.instance}listenerCount(l){return this._events[l]!=null?this._events[l].length:0}async trigger(l,...a){var d,h;try{return l!=="debug"&&this.trigger("debug",`Event triggered: ${l}`,a),this._events[l]==null?void 0:(this._events[l]=this._events[l].filter(function(g){return g.status!=="none"}),h=this._events[l].map(async g=>{var f,b;if(g.status!=="none"){g.status==="once"&&(g.status="none");try{return b=typeof g.cb=="function"?g.cb(...a):void 0,typeof(b!=null?b.then:void 0)=="function"?await b:b}catch(R){return f=R,this.trigger("error",f),null}}}),(await Promise.all(h)).find(function(g){return g!=null}))}catch(g){return d=g,this.trigger("error",d),null}}};var u=c,p,m,w;p=i,m=u,w=class{constructor(l){var a;this.Events=new m(this),this._length=0,this._lists=function(){var d,h,g;for(g=[],a=d=1,h=l;1<=h?d<=h:d>=h;a=1<=h?++d:--d)g.push(new p(()=>this.incr(),()=>this.decr()));return g}.call(this)}incr(){if(this._length++===0)return this.Events.trigger("leftzero")}decr(){if(--this._length===0)return this.Events.trigger("zero")}push(l){return this._lists[l.options.priority].push(l)}queued(l){return l!=null?this._lists[l].length:this._length}shiftAll(l){return this._lists.forEach(function(a){return a.forEachShift(l)})}getFirst(l=this._lists){var a,d,h;for(a=0,d=l.length;a<d;a++)if(h=l[a],h.length>0)return h;return[]}shiftLastFrom(l){return this.getFirst(this._lists.slice(l).reverse()).shift()}};var k=w,y;y=class extends Error{};var _=y,O,v,G,C,Y;C=10,v=5,Y=o,O=_,G=class{constructor(l,a,d,h,g,f,b,R){this.task=l,this.args=a,this.rejectOnDrop=g,this.Events=f,this._states=b,this.Promise=R,this.options=Y.load(d,h),this.options.priority=this._sanitizePriority(this.options.priority),this.options.id===h.id&&(this.options.id=`${this.options.id}-${this._randomIndex()}`),this.promise=new this.Promise((q,M)=>{this._resolve=q,this._reject=M}),this.retryCount=0}_sanitizePriority(l){var a;return a=~~l!==l?v:l,a<0?0:a>C-1?C-1:a}_randomIndex(){return Math.random().toString(36).slice(2)}doDrop({error:l,message:a="This job has been dropped by Bottleneck"}={}){return this._states.remove(this.options.id)?(this.rejectOnDrop&&this._reject(l!=null?l:new O(a)),this.Events.trigger("dropped",{args:this.args,options:this.options,task:this.task,promise:this.promise}),!0):!1}_assertStatus(l){var a;if(a=this._states.jobStatus(this.options.id),!(a===l||l==="DONE"&&a===null))throw new O(`Invalid job status ${a}, expected ${l}. Please open an issue at https://github.com/SGrondin/bottleneck/issues`)}doReceive(){return this._states.start(this.options.id),this.Events.trigger("received",{args:this.args,options:this.options})}doQueue(l,a){return this._assertStatus("RECEIVED"),this._states.next(this.options.id),this.Events.trigger("queued",{args:this.args,options:this.options,reachedHWM:l,blocked:a})}doRun(){return this.retryCount===0?(this._assertStatus("QUEUED"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),this.Events.trigger("scheduled",{args:this.args,options:this.options})}async doExecute(l,a,d,h){var g,f,b;this.retryCount===0?(this._assertStatus("RUNNING"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),f={args:this.args,options:this.options,retryCount:this.retryCount},this.Events.trigger("executing",f);try{if(b=await(l!=null?l.schedule(this.options,this.task,...this.args):this.task(...this.args)),a())return this.doDone(f),await h(this.options,f),this._assertStatus("DONE"),this._resolve(b)}catch(R){return g=R,this._onFailure(g,f,a,d,h)}}doExpire(l,a,d){var h,g;return this._states.jobStatus(this.options.id==="RUNNING")&&this._states.next(this.options.id),this._assertStatus("EXECUTING"),g={args:this.args,options:this.options,retryCount:this.retryCount},h=new O(`This job timed out after ${this.options.expiration} ms.`),this._onFailure(h,g,l,a,d)}async _onFailure(l,a,d,h,g){var f,b;if(d())return f=await this.Events.trigger("failed",l,a),f!=null?(b=~~f,this.Events.trigger("retry",`Retrying ${this.options.id} after ${b} ms`,a),this.retryCount++,h(b)):(this.doDone(a),await g(this.options,a),this._assertStatus("DONE"),this._reject(l))}doDone(l){return this._assertStatus("EXECUTING"),this._states.next(this.options.id),this.Events.trigger("done",l)}};var N=G,j,W,U;U=o,j=_,W=class{constructor(l,a,d){this.instance=l,this.storeOptions=a,this.clientId=this.instance._randomIndex(),U.load(d,d,this),this._nextRequest=this._lastReservoirRefresh=this._lastReservoirIncrease=Date.now(),this._running=0,this._done=0,this._unblockTime=0,this.ready=this.Promise.resolve(),this.clients={},this._startHeartbeat()}_startHeartbeat(){var l;return this.heartbeat==null&&(this.storeOptions.reservoirRefreshInterval!=null&&this.storeOptions.reservoirRefreshAmount!=null||this.storeOptions.reservoirIncreaseInterval!=null&&this.storeOptions.reservoirIncreaseAmount!=null)?typeof(l=this.heartbeat=setInterval(()=>{var a,d,h,g,f;if(g=Date.now(),this.storeOptions.reservoirRefreshInterval!=null&&g>=this._lastReservoirRefresh+this.storeOptions.reservoirRefreshInterval&&(this._lastReservoirRefresh=g,this.storeOptions.reservoir=this.storeOptions.reservoirRefreshAmount,this.instance._drainAll(this.computeCapacity())),this.storeOptions.reservoirIncreaseInterval!=null&&g>=this._lastReservoirIncrease+this.storeOptions.reservoirIncreaseInterval&&({reservoirIncreaseAmount:a,reservoirIncreaseMaximum:h,reservoir:f}=this.storeOptions,this._lastReservoirIncrease=g,d=h!=null?Math.min(a,h-f):a,d>0))return this.storeOptions.reservoir+=d,this.instance._drainAll(this.computeCapacity())},this.heartbeatInterval)).unref=="function"?l.unref():void 0:clearInterval(this.heartbeat)}async __publish__(l){return await this.yieldLoop(),this.instance.Events.trigger("message",l.toString())}async __disconnect__(l){return await this.yieldLoop(),clearInterval(this.heartbeat),this.Promise.resolve()}yieldLoop(l=0){return new this.Promise(function(a,d){return setTimeout(a,l)})}computePenalty(){var l;return(l=this.storeOptions.penalty)!=null?l:15*this.storeOptions.minTime||5e3}async __updateSettings__(l){return await this.yieldLoop(),U.overwrite(l,l,this.storeOptions),this._startHeartbeat(),this.instance._drainAll(this.computeCapacity()),!0}async __running__(){return await this.yieldLoop(),this._running}async __queued__(){return await this.yieldLoop(),this.instance.queued()}async __done__(){return await this.yieldLoop(),this._done}async __groupCheck__(l){return await this.yieldLoop(),this._nextRequest+this.timeout<l}computeCapacity(){var l,a;return{maxConcurrent:l,reservoir:a}=this.storeOptions,l!=null&&a!=null?Math.min(l-this._running,a):l!=null?l-this._running:a!=null?a:null}conditionsCheck(l){var a;return a=this.computeCapacity(),a==null||l<=a}async __incrementReservoir__(l){var a;return await this.yieldLoop(),a=this.storeOptions.reservoir+=l,this.instance._drainAll(this.computeCapacity()),a}async __currentReservoir__(){return await this.yieldLoop(),this.storeOptions.reservoir}isBlocked(l){return this._unblockTime>=l}check(l,a){return this.conditionsCheck(l)&&this._nextRequest-a<=0}async __check__(l){var a;return await this.yieldLoop(),a=Date.now(),this.check(l,a)}async __register__(l,a,d){var h,g;return await this.yieldLoop(),h=Date.now(),this.conditionsCheck(a)?(this._running+=a,this.storeOptions.reservoir!=null&&(this.storeOptions.reservoir-=a),g=Math.max(this._nextRequest-h,0),this._nextRequest=h+g+this.storeOptions.minTime,{success:!0,wait:g,reservoir:this.storeOptions.reservoir}):{success:!1}}strategyIsBlock(){return this.storeOptions.strategy===3}async __submit__(l,a){var d,h,g;if(await this.yieldLoop(),this.storeOptions.maxConcurrent!=null&&a>this.storeOptions.maxConcurrent)throw new j(`Impossible to add a job having a weight of ${a} to a limiter having a maxConcurrent setting of ${this.storeOptions.maxConcurrent}`);return h=Date.now(),g=this.storeOptions.highWater!=null&&l===this.storeOptions.highWater&&!this.check(a,h),d=this.strategyIsBlock()&&(g||this.isBlocked(h)),d&&(this._unblockTime=h+this.computePenalty(),this._nextRequest=this._unblockTime+this.storeOptions.minTime,this.instance._dropAllQueued()),{reachedHWM:g,blocked:d,strategy:this.storeOptions.strategy}}async __free__(l,a){return await this.yieldLoop(),this._running-=a,this._done+=a,this.instance._drainAll(this.computeCapacity()),{running:this._running}}};var B=W,ee,re;ee=_,re=class{constructor(l){this.status=l,this._jobs={},this.counts=this.status.map(function(){return 0})}next(l){var a,d;if(a=this._jobs[l],d=a+1,a!=null&&d<this.status.length)return this.counts[a]--,this.counts[d]++,this._jobs[l]++;if(a!=null)return this.counts[a]--,delete this._jobs[l]}start(l){var a;return a=0,this._jobs[l]=a,this.counts[a]++}remove(l){var a;return a=this._jobs[l],a!=null&&(this.counts[a]--,delete this._jobs[l]),a!=null}jobStatus(l){var a;return(a=this.status[this._jobs[l]])!=null?a:null}statusJobs(l){var a,d,h,g,f;if(l!=null){if(d=this.status.indexOf(l),d<0)throw new ee(`status must be one of ${this.status.join(", ")}`);h=this._jobs,g=[];for(a in h)f=h[a],f===d&&g.push(a);return g}else return Object.keys(this._jobs)}statusCounts(){return this.counts.reduce((l,a,d)=>(l[this.status[d]]=a,l),{})}};var le=re,x,F;x=i,F=class{constructor(l,a){this.schedule=this.schedule.bind(this),this.name=l,this.Promise=a,this._running=0,this._queue=new x}isEmpty(){return this._queue.length===0}async _tryToRun(){var l,a,d,h,g,f,b;if(this._running<1&&this._queue.length>0)return this._running++,{task:b,args:l,resolve:g,reject:h}=this._queue.shift(),a=await async function(){try{return f=await b(...l),function(){return g(f)}}catch(R){return d=R,function(){return h(d)}}}(),this._running--,this._tryToRun(),a()}schedule(l,...a){var d,h,g;return g=h=null,d=new this.Promise(function(f,b){return g=f,h=b}),this._queue.push({task:l,args:a,resolve:g,reject:h}),this._tryToRun(),d}};var ye=F,Lt="2.19.5",ao={version:Lt},co=Object.freeze({version:Lt,default:ao}),Ht=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Nt=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),uo=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Wt,Bt,zt,Vt,Yt,Ae;Ae=o,Wt=u,Vt=Ht,zt=Nt,Yt=uo,Bt=function(){class T{constructor(a={}){this.deleteKey=this.deleteKey.bind(this),this.limiterOptions=a,Ae.load(this.limiterOptions,this.defaults,this),this.Events=new Wt(this),this.instances={},this.Bottleneck=nr,this._startAutoCleanup(),this.sharedConnection=this.connection!=null,this.connection==null&&(this.limiterOptions.datastore==="redis"?this.connection=new Vt(Object.assign({},this.limiterOptions,{Events:this.Events})):this.limiterOptions.datastore==="ioredis"&&(this.connection=new zt(Object.assign({},this.limiterOptions,{Events:this.Events}))))}key(a=""){var d;return(d=this.instances[a])!=null?d:(()=>{var h;return h=this.instances[a]=new this.Bottleneck(Object.assign(this.limiterOptions,{id:`${this.id}-${a}`,timeout:this.timeout,connection:this.connection})),this.Events.trigger("created",h,a),h})()}async deleteKey(a=""){var d,h;return h=this.instances[a],this.connection&&(d=await this.connection.__runCommand__(["del",...Yt.allKeys(`${this.id}-${a}`)])),h!=null&&(delete this.instances[a],await h.disconnect()),h!=null||d>0}limiters(){var a,d,h,g;d=this.instances,h=[];for(a in d)g=d[a],h.push({key:a,limiter:g});return h}keys(){return Object.keys(this.instances)}async clusterKeys(){var a,d,h,g,f,b,R,q,M;if(this.connection==null)return this.Promise.resolve(this.keys());for(b=[],a=null,M=`b_${this.id}-`.length,d=9;a!==0;)for([q,h]=await this.connection.__runCommand__(["scan",a!=null?a:0,"match",`b_${this.id}-*_settings`,"count",1e4]),a=~~q,g=0,R=h.length;g<R;g++)f=h[g],b.push(f.slice(M,-d));return b}_startAutoCleanup(){var a;return clearInterval(this.interval),typeof(a=this.interval=setInterval(async()=>{var d,h,g,f,b,R;b=Date.now(),g=this.instances,f=[];for(h in g){R=g[h];try{await R._store.__groupCheck__(b)?f.push(this.deleteKey(h)):f.push(void 0)}catch(q){d=q,f.push(R.Events.trigger("error",d))}}return f},this.timeout/2)).unref=="function"?a.unref():void 0}updateSettings(a={}){if(Ae.overwrite(a,this.defaults,this),Ae.overwrite(a,a,this.limiterOptions),a.timeout!=null)return this._startAutoCleanup()}disconnect(a=!0){var d;if(!this.sharedConnection)return(d=this.connection)!=null?d.disconnect(a):void 0}}return T.prototype.defaults={timeout:1e3*60*5,connection:null,Promise,id:"group-key"},T}.call(e);var lo=Bt,Kt,Jt,Qt;Qt=o,Jt=u,Kt=function(){class T{constructor(a={}){this.options=a,Qt.load(this.options,this.defaults,this),this.Events=new Jt(this),this._arr=[],this._resetPromise(),this._lastFlush=Date.now()}_resetPromise(){return this._promise=new this.Promise((a,d)=>this._resolve=a)}_flush(){return clearTimeout(this._timeout),this._lastFlush=Date.now(),this._resolve(),this.Events.trigger("batch",this._arr),this._arr=[],this._resetPromise()}add(a){var d;return this._arr.push(a),d=this._promise,this._arr.length===this.maxSize?this._flush():this.maxTime!=null&&this._arr.length===1&&(this._timeout=setTimeout(()=>this._flush(),this.maxTime)),d}}return T.prototype.defaults={maxTime:null,maxSize:null,Promise},T}.call(e);var po=Kt,ho=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),go=t(co),Xt,Zt,tt,rt,er,st,tr,rr,sr,ot,K,or=[].splice;st=10,Zt=5,K=o,tr=k,rt=N,er=B,rr=ho,tt=u,sr=le,ot=ye,Xt=function(){class T{constructor(a={},...d){var h,g;this._addToQueue=this._addToQueue.bind(this),this._validateOptions(a,d),K.load(a,this.instanceDefaults,this),this._queues=new tr(st),this._scheduled={},this._states=new sr(["RECEIVED","QUEUED","RUNNING","EXECUTING"].concat(this.trackDoneStatus?["DONE"]:[])),this._limiter=null,this.Events=new tt(this),this._submitLock=new ot("submit",this.Promise),this._registerLock=new ot("register",this.Promise),g=K.load(a,this.storeDefaults,{}),this._store=function(){if(this.datastore==="redis"||this.datastore==="ioredis"||this.connection!=null)return h=K.load(a,this.redisStoreDefaults,{}),new rr(this,g,h);if(this.datastore==="local")return h=K.load(a,this.localStoreDefaults,{}),new er(this,g,h);throw new T.prototype.BottleneckError(`Invalid datastore type: ${this.datastore}`)}.call(this),this._queues.on("leftzero",()=>{var f;return(f=this._store.heartbeat)!=null&&typeof f.ref=="function"?f.ref():void 0}),this._queues.on("zero",()=>{var f;return(f=this._store.heartbeat)!=null&&typeof f.unref=="function"?f.unref():void 0})}_validateOptions(a,d){if(!(a!=null&&typeof a=="object"&&d.length===0))throw new T.prototype.BottleneckError("Bottleneck v2 takes a single object argument. Refer to https://github.com/SGrondin/bottleneck#upgrading-to-v2 if you're upgrading from Bottleneck v1.")}ready(){return this._store.ready}clients(){return this._store.clients}channel(){return`b_${this.id}`}channel_client(){return`b_${this.id}_${this._store.clientId}`}publish(a){return this._store.__publish__(a)}disconnect(a=!0){return this._store.__disconnect__(a)}chain(a){return this._limiter=a,this}queued(a){return this._queues.queued(a)}clusterQueued(){return this._store.__queued__()}empty(){return this.queued()===0&&this._submitLock.isEmpty()}running(){return this._store.__running__()}done(){return this._store.__done__()}jobStatus(a){return this._states.jobStatus(a)}jobs(a){return this._states.statusJobs(a)}counts(){return this._states.statusCounts()}_randomIndex(){return Math.random().toString(36).slice(2)}check(a=1){return this._store.__check__(a)}_clearGlobalState(a){return this._scheduled[a]!=null?(clearTimeout(this._scheduled[a].expiration),delete this._scheduled[a],!0):!1}async _free(a,d,h,g){var f,b;try{if({running:b}=await this._store.__free__(a,h.weight),this.Events.trigger("debug",`Freed ${h.id}`,g),b===0&&this.empty())return this.Events.trigger("idle")}catch(R){return f=R,this.Events.trigger("error",f)}}_run(a,d,h){var g,f,b;return d.doRun(),g=this._clearGlobalState.bind(this,a),b=this._run.bind(this,a,d),f=this._free.bind(this,a,d),this._scheduled[a]={timeout:setTimeout(()=>d.doExecute(this._limiter,g,b,f),h),expiration:d.options.expiration!=null?setTimeout(function(){return d.doExpire(g,b,f)},h+d.options.expiration):void 0,job:d}}_drainOne(a){return this._registerLock.schedule(()=>{var d,h,g,f,b;return this.queued()===0?this.Promise.resolve(null):(b=this._queues.getFirst(),{options:f,args:d}=g=b.first(),a!=null&&f.weight>a?this.Promise.resolve(null):(this.Events.trigger("debug",`Draining ${f.id}`,{args:d,options:f}),h=this._randomIndex(),this._store.__register__(h,f.weight,f.expiration).then(({success:R,wait:q,reservoir:M})=>{var be;return this.Events.trigger("debug",`Drained ${f.id}`,{success:R,args:d,options:f}),R?(b.shift(),be=this.empty(),be&&this.Events.trigger("empty"),M===0&&this.Events.trigger("depleted",be),this._run(h,g,q),this.Promise.resolve(f.weight)):this.Promise.resolve(null)})))})}_drainAll(a,d=0){return this._drainOne(a).then(h=>{var g;return h!=null?(g=a!=null?a-h:a,this._drainAll(g,d+h)):this.Promise.resolve(d)}).catch(h=>this.Events.trigger("error",h))}_dropAllQueued(a){return this._queues.shiftAll(function(d){return d.doDrop({message:a})})}stop(a={}){var d,h;return a=K.load(a,this.stopDefaults),h=g=>{var f;return f=()=>{var b;return b=this._states.counts,b[0]+b[1]+b[2]+b[3]===g},new this.Promise((b,R)=>f()?b():this.on("done",()=>{if(f())return this.removeAllListeners("done"),b()}))},d=a.dropWaitingJobs?(this._run=function(g,f){return f.doDrop({message:a.dropErrorMessage})},this._drainOne=()=>this.Promise.resolve(null),this._registerLock.schedule(()=>this._submitLock.schedule(()=>{var g,f,b;f=this._scheduled;for(g in f)b=f[g],this.jobStatus(b.job.options.id)==="RUNNING"&&(clearTimeout(b.timeout),clearTimeout(b.expiration),b.job.doDrop({message:a.dropErrorMessage}));return this._dropAllQueued(a.dropErrorMessage),h(0)}))):this.schedule({priority:st-1,weight:0},()=>h(1)),this._receive=function(g){return g._reject(new T.prototype.BottleneckError(a.enqueueErrorMessage))},this.stop=()=>this.Promise.reject(new T.prototype.BottleneckError("stop() has already been called")),d}async _addToQueue(a){var d,h,g,f,b,R,q;({args:d,options:f}=a);try{({reachedHWM:b,blocked:h,strategy:q}=await this._store.__submit__(this.queued(),f.weight))}catch(M){return g=M,this.Events.trigger("debug",`Could not queue ${f.id}`,{args:d,options:f,error:g}),a.doDrop({error:g}),!1}return h?(a.doDrop(),!0):b&&(R=q===T.prototype.strategy.LEAK?this._queues.shiftLastFrom(f.priority):q===T.prototype.strategy.OVERFLOW_PRIORITY?this._queues.shiftLastFrom(f.priority+1):q===T.prototype.strategy.OVERFLOW?a:void 0,R!=null&&R.doDrop(),R==null||q===T.prototype.strategy.OVERFLOW)?(R==null&&a.doDrop(),b):(a.doQueue(b,h),this._queues.push(a),await this._drainAll(),b)}_receive(a){return this._states.jobStatus(a.options.id)!=null?(a._reject(new T.prototype.BottleneckError(`A job with the same id already exists (id=${a.options.id})`)),!1):(a.doReceive(),this._submitLock.schedule(this._addToQueue,a))}submit(...a){var d,h,g,f,b,R,q;return typeof a[0]=="function"?(b=a,[h,...a]=b,[d]=or.call(a,-1),f=K.load({},this.jobDefaults)):(R=a,[f,h,...a]=R,[d]=or.call(a,-1),f=K.load(f,this.jobDefaults)),q=(...M)=>new this.Promise(function(be,fo){return h(...M,function(...ir){return(ir[0]!=null?fo:be)(ir)})}),g=new rt(q,a,f,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),g.promise.then(function(M){return typeof d=="function"?d(...M):void 0}).catch(function(M){return Array.isArray(M)?typeof d=="function"?d(...M):void 0:typeof d=="function"?d(M):void 0}),this._receive(g)}schedule(...a){var d,h,g;return typeof a[0]=="function"?([g,...a]=a,h={}):[h,g,...a]=a,d=new rt(g,a,h,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),this._receive(d),d.promise}wrap(a){var d,h;return d=this.schedule.bind(this),h=function(...g){return d(a.bind(this),...g)},h.withOptions=function(g,...f){return d(g,a,...f)},h}async updateSettings(a={}){return await this._store.__updateSettings__(K.overwrite(a,this.storeDefaults)),K.overwrite(a,this.instanceDefaults,this),this}currentReservoir(){return this._store.__currentReservoir__()}incrementReservoir(a=0){return this._store.__incrementReservoir__(a)}}return T.default=T,T.Events=tt,T.version=T.prototype.version=go.version,T.strategy=T.prototype.strategy={LEAK:1,OVERFLOW:2,OVERFLOW_PRIORITY:4,BLOCK:3},T.BottleneckError=T.prototype.BottleneckError=_,T.Group=T.prototype.Group=lo,T.RedisConnection=T.prototype.RedisConnection=Ht,T.IORedisConnection=T.prototype.IORedisConnection=Nt,T.Batcher=T.prototype.Batcher=po,T.prototype.jobDefaults={priority:Zt,weight:1,expiration:null,id:"<no-id>"},T.prototype.storeDefaults={maxConcurrent:null,minTime:0,highWater:null,strategy:T.prototype.strategy.LEAK,penalty:null,reservoir:null,reservoirRefreshInterval:null,reservoirRefreshAmount:null,reservoirIncreaseInterval:null,reservoirIncreaseAmount:null,reservoirIncreaseMaximum:null},T.prototype.localStoreDefaults={Promise,timeout:null,heartbeatInterval:250},T.prototype.redisStoreDefaults={Promise,timeout:null,heartbeatInterval:5e3,clientTimeout:1e4,Redis:null,clientOptions:{},clusterNodes:null,clearDatastore:!1,connection:null},T.prototype.instanceDefaults={datastore:"local",connection:null,id:"<no-id>",rejectOnDrop:!0,trackDoneStatus:!1,Promise},T.prototype.stopDefaults={enqueueErrorMessage:"This limiter has been stopped and cannot accept new jobs.",dropWaitingJobs:!0,dropErrorMessage:"This limiter has been stopped."},T}.call(e);var nr=Xt,mo=nr;return mo})});var Ea={};vo(Ea,{default:()=>Ze});module.exports=ko(Ea);var et=require("obsidian");var it={githubToken:"",repositories:[],dateFormat:"",syncOnStartup:!0,syncNoticeMode:"normal",syncInterval:0,escapeMode:"strict"};function I(){return typeof navigator=="object"&&"userAgent"in navigator?navigator.userAgent:typeof process=="object"&&process.version!==void 0?`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`:"<environment undetectable>"}function Re(e,t,r,s){if(typeof r!="function")throw new Error("method for before hook must be a function");return s||(s={}),Array.isArray(t)?t.reverse().reduce((o,n)=>Re.bind(null,e,n,o,s),r)():Promise.resolve().then(()=>e.registry[t]?e.registry[t].reduce((o,n)=>n.hook.bind(null,o,s),r)():r(s))}function ur(e,t,r,s){let o=s;e.registry[r]||(e.registry[r]=[]),t==="before"&&(s=(n,i)=>Promise.resolve().then(o.bind(null,i)).then(n.bind(null,i))),t==="after"&&(s=(n,i)=>{let c;return Promise.resolve().then(n.bind(null,i)).then(u=>(c=u,o(c,i))).then(()=>c)}),t==="error"&&(s=(n,i)=>Promise.resolve().then(n.bind(null,i)).catch(c=>o(c,i))),e.registry[r].push({hook:s,orig:o})}function lr(e,t,r){if(!e.registry[t])return;let s=e.registry[t].map(o=>o.orig).indexOf(r);s!==-1&&e.registry[t].splice(s,1)}var pr=Function.bind,dr=pr.bind(pr);function hr(e,t,r){let s=dr(lr,null).apply(null,r?[t,r]:[t]);e.api={remove:s},e.remove=s,["before","error","after","wrap"].forEach(o=>{let n=r?[t,o,r]:[t,o];e[o]=e.api[o]=dr(ur,null).apply(null,n)})}function Oo(){let e=Symbol("Singular"),t={registry:{}},r=Re.bind(null,t,e);return hr(r,t,e),r}function So(){let e={registry:{}},t=Re.bind(null,e);return hr(t,e),t}var gr={Singular:Oo,Collection:So};var Go="0.0.0-development",Po=`octokit-endpoint.js/${Go} ${I()}`,Ao={method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":Po},mediaType:{format:""}};function Ro(e){return e?Object.keys(e).reduce((t,r)=>(t[r.toLowerCase()]=e[r],t),{}):{}}function Co(e){if(typeof e!="object"||e===null||Object.prototype.toString.call(e)!=="[object Object]")return!1;let t=Object.getPrototypeOf(e);if(t===null)return!0;let r=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return typeof r=="function"&&r instanceof r&&Function.prototype.call(r)===Function.prototype.call(e)}function wr(e,t){let r=Object.assign({},e);return Object.keys(t).forEach(s=>{Co(t[s])?s in e?r[s]=wr(e[s],t[s]):Object.assign(r,{[s]:t[s]}):Object.assign(r,{[s]:t[s]})}),r}function mr(e){for(let t in e)e[t]===void 0&&delete e[t];return e}function ct(e,t,r){var o;if(typeof t=="string"){let[n,i]=t.split(" ");r=Object.assign(i?{method:n,url:i}:{url:n},r)}else r=Object.assign({},t);r.headers=Ro(r.headers),mr(r),mr(r.headers);let s=wr(e||{},r);return r.url==="/graphql"&&(e&&((o=e.mediaType.previews)!=null&&o.length)&&(s.mediaType.previews=e.mediaType.previews.filter(n=>!s.mediaType.previews.includes(n)).concat(s.mediaType.previews)),s.mediaType.previews=(s.mediaType.previews||[]).map(n=>n.replace(/-preview/,""))),s}function Do(e,t){let r=/\?/.test(e)?"&":"?",s=Object.keys(t);return s.length===0?e:e+r+s.map(o=>o==="q"?"q="+t.q.split("+").map(encodeURIComponent).join("+"):`${o}=${encodeURIComponent(t[o])}`).join("&")}var Fo=/\{[^{}}]+\}/g;function xo(e){return e.replace(/(?:^\W+)|(?:(?<!\W)\W+$)/g,"").split(/,/)}function Io(e){let t=e.match(Fo);return t?t.map(xo).reduce((r,s)=>r.concat(s),[]):[]}function fr(e,t){let r={__proto__:null};for(let s of Object.keys(e))t.indexOf(s)===-1&&(r[s]=e[s]);return r}function yr(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map(function(t){return/%[0-9A-Fa-f]/.test(t)||(t=encodeURI(t).replace(/%5B/g,"[").replace(/%5D/g,"]")),t}).join("")}function de(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()})}function Ee(e,t,r){return t=e==="+"||e==="#"?yr(t):de(t),r?de(r)+"="+t:t}function pe(e){return e!=null}function at(e){return e===";"||e==="&"||e==="?"}function qo(e,t,r,s){var o=e[r],n=[];if(pe(o)&&o!=="")if(typeof o=="string"||typeof o=="number"||typeof o=="boolean")o=o.toString(),s&&s!=="*"&&(o=o.substring(0,parseInt(s,10))),n.push(Ee(t,o,at(t)?r:""));else if(s==="*")Array.isArray(o)?o.filter(pe).forEach(function(i){n.push(Ee(t,i,at(t)?r:""))}):Object.keys(o).forEach(function(i){pe(o[i])&&n.push(Ee(t,o[i],i))});else{let i=[];Array.isArray(o)?o.filter(pe).forEach(function(c){i.push(Ee(t,c))}):Object.keys(o).forEach(function(c){pe(o[c])&&(i.push(de(c)),i.push(Ee(t,o[c].toString())))}),at(t)?n.push(de(r)+"="+i.join(",")):i.length!==0&&n.push(i.join(","))}else t===";"?pe(o)&&n.push(de(r)):o===""&&(t==="&"||t==="?")?n.push(de(r)+"="):o===""&&n.push("");return n}function jo(e){return{expand:Uo.bind(null,e)}}function Uo(e,t){var r=["+","#",".","/",";","?","&"];return e=e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(s,o,n){if(o){let c="",u=[];if(r.indexOf(o.charAt(0))!==-1&&(c=o.charAt(0),o=o.substr(1)),o.split(/,/g).forEach(function(p){var m=/([^:\*]*)(?::(\d+)|(\*))?/.exec(p);u.push(qo(t,c,m[1],m[2]||m[3]))}),c&&c!=="+"){var i=",";return c==="?"?i="&":c!=="#"&&(i=c),(u.length!==0?c:"")+u.join(i)}else return u.join(",")}else return yr(n)}),e==="/"?e:e.replace(/\/$/,"")}function br(e){var m;let t=e.method.toUpperCase(),r=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),s=Object.assign({},e.headers),o,n=fr(e,["method","baseUrl","url","headers","request","mediaType"]),i=Io(r);r=jo(r).expand(n),/^http/.test(r)||(r=e.baseUrl+r);let c=Object.keys(e).filter(w=>i.includes(w)).concat("baseUrl"),u=fr(n,c);if(!/application\/octet-stream/i.test(s.accept)&&(e.mediaType.format&&(s.accept=s.accept.split(/,/).map(w=>w.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${e.mediaType.format}`)).join(",")),r.endsWith("/graphql")&&(m=e.mediaType.previews)!=null&&m.length)){let w=s.accept.match(/(?<![\w-])[\w-]+(?=-preview)/g)||[];s.accept=w.concat(e.mediaType.previews).map(k=>{let y=e.mediaType.format?`.${e.mediaType.format}`:"+json";return`application/vnd.github.${k}-preview${y}`}).join(",")}return["GET","HEAD"].includes(t)?r=Do(r,u):"data"in u?o=u.data:Object.keys(u).length&&(o=u),!s["content-type"]&&typeof o!="undefined"&&(s["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(t)&&typeof o=="undefined"&&(o=""),Object.assign({method:t,url:r,headers:s},typeof o!="undefined"?{body:o}:null,e.request?{request:e.request}:null)}function Mo(e,t,r){return br(ct(e,t,r))}function Tr(e,t){let r=ct(e,t),s=Mo.bind(null,r);return Object.assign(s,{DEFAULTS:r,defaults:Tr.bind(null,r),merge:ct.bind(null,r),parse:br})}var Er=Tr(null,Ao);var Gr=nt(Or(),1);var V=class extends Error{constructor(r,s,o){super(r);E(this,"name");E(this,"status");E(this,"request");E(this,"response");this.name="HttpError",this.status=Number.parseInt(s),Number.isNaN(this.status)&&(this.status=0),"response"in o&&(this.response=o.response);let n=Object.assign({},o.request);o.request.headers.authorization&&(n.headers=Object.assign({},o.request.headers,{authorization:o.request.headers.authorization.replace(/(?<! ) .*$/," [REDACTED]")})),n.url=n.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=n}};var $o="0.0.0-development",Lo={headers:{"user-agent":`octokit-request.js/${$o} ${I()}`}};function Ho(e){if(typeof e!="object"||e===null||Object.prototype.toString.call(e)!=="[object Object]")return!1;let t=Object.getPrototypeOf(e);if(t===null)return!0;let r=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return typeof r=="function"&&r instanceof r&&Function.prototype.call(r)===Function.prototype.call(e)}async function Sr(e){var w,k,y,_,O;let t=((w=e.request)==null?void 0:w.fetch)||globalThis.fetch;if(!t)throw new Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");let r=((k=e.request)==null?void 0:k.log)||console,s=((y=e.request)==null?void 0:y.parseSuccessResponseBody)!==!1,o=Ho(e.body)||Array.isArray(e.body)?JSON.stringify(e.body):e.body,n=Object.fromEntries(Object.entries(e.headers).map(([v,G])=>[v,String(G)])),i;try{i=await t(e.url,{method:e.method,body:o,redirect:(_=e.request)==null?void 0:_.redirect,headers:n,signal:(O=e.request)==null?void 0:O.signal,...e.body&&{duplex:"half"}})}catch(v){let G="Unknown Error";if(v instanceof Error){if(v.name==="AbortError")throw v.status=500,v;G=v.message,v.name==="TypeError"&&"cause"in v&&(v.cause instanceof Error?G=v.cause.message:typeof v.cause=="string"&&(G=v.cause))}let C=new V(G,500,{request:e});throw C.cause=v,C}let c=i.status,u=i.url,p={};for(let[v,G]of i.headers)p[v]=G;let m={url:u,status:c,headers:p,data:""};if("deprecation"in p){let v=p.link&&p.link.match(/<([^<>]+)>; rel="deprecation"/),G=v&&v.pop();r.warn(`[@octokit/request] "${e.method} ${e.url}" is deprecated. It is scheduled to be removed on ${p.sunset}${G?`. See ${G}`:""}`)}if(c===204||c===205)return m;if(e.method==="HEAD"){if(c<400)return m;throw new V(i.statusText,c,{response:m,request:e})}if(c===304)throw m.data=await ut(i),new V("Not modified",c,{response:m,request:e});if(c>=400)throw m.data=await ut(i),new V(Wo(m.data),c,{response:m,request:e});return m.data=s?await ut(i):i.body,m}async function ut(e){var s;let t=e.headers.get("content-type");if(!t)return e.text().catch(()=>"");let r=(0,Gr.safeParse)(t);if(No(r)){let o="";try{return o=await e.text(),JSON.parse(o)}catch(n){return o}}else return r.type.startsWith("text/")||((s=r.parameters.charset)==null?void 0:s.toLowerCase())==="utf-8"?e.text().catch(()=>""):e.arrayBuffer().catch(()=>new ArrayBuffer(0))}function No(e){return e.type==="application/json"||e.type==="application/scim+json"}function Wo(e){if(typeof e=="string")return e;if(e instanceof ArrayBuffer)return"Unknown error";if("message"in e){let t="documentation_url"in e?` - ${e.documentation_url}`:"";return Array.isArray(e.errors)?`${e.message}: ${e.errors.map(r=>JSON.stringify(r)).join(", ")}${t}`:`${e.message}${t}`}return`Unknown error: ${JSON.stringify(e)}`}function lt(e,t){let r=e.defaults(t);return Object.assign(function(o,n){let i=r.merge(o,n);if(!i.request||!i.request.hook)return Sr(r.parse(i));let c=(u,p)=>Sr(r.parse(r.merge(u,p)));return Object.assign(c,{endpoint:r,defaults:lt.bind(null,r)}),i.request.hook(c,i)},{endpoint:r,defaults:lt.bind(null,r)})}var P=lt(Er,Lo);var Bo="0.0.0-development";function zo(e){return`Request failed due to following response errors:
`+e.errors.map(t=>` - ${t.message}`).join(`
`)}var Vo=class extends Error{constructor(t,r,s){super(zo(s));E(this,"name","GraphqlResponseError");E(this,"errors");E(this,"data");this.request=t,this.headers=r,this.response=s,this.errors=s.errors,this.data=s.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},Yo=["method","baseUrl","url","headers","request","query","mediaType","operationName"],Ko=["query","method","url"],Pr=/\/api\/v3\/?$/;function Jo(e,t,r){if(r){if(typeof t=="string"&&"query"in r)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(let i in r)if(Ko.includes(i))return Promise.reject(new Error(`[@octokit/graphql] "${i}" cannot be used as variable name`))}let s=typeof t=="string"?Object.assign({query:t},r):t,o=Object.keys(s).reduce((i,c)=>Yo.includes(c)?(i[c]=s[c],i):(i.variables||(i.variables={}),i.variables[c]=s[c],i),{}),n=s.baseUrl||e.endpoint.DEFAULTS.baseUrl;return Pr.test(n)&&(o.url=n.replace(Pr,"/api/graphql")),e(o).then(i=>{if(i.data.errors){let c={};for(let u of Object.keys(i.headers))c[u]=i.headers[u];throw new Vo(o,c,i.data)}return i.data.data})}function pt(e,t){let r=e.defaults(t);return Object.assign((o,n)=>Jo(r,o,n),{defaults:pt.bind(null,r),endpoint:r.endpoint})}var Na=pt(P,{headers:{"user-agent":`octokit-graphql.js/${Bo} ${I()}`},method:"POST",url:"/graphql"});function Ar(e){return pt(e,{method:"POST",url:"/graphql"})}var dt="(?:[a-zA-Z0-9_-]+)",Rr="\\.",Cr=new RegExp(`^${dt}${Rr}${dt}${Rr}${dt}$`),Qo=Cr.test.bind(Cr);async function Xo(e){let t=Qo(e),r=e.startsWith("v1.")||e.startsWith("ghs_"),s=e.startsWith("ghu_");return{type:"token",token:e,tokenType:t?"app":r?"installation":s?"user-to-server":"oauth"}}function Zo(e){return e.split(/\./).length===3?`bearer ${e}`:`token ${e}`}async function en(e,t,r,s){let o=t.endpoint.merge(r,s);return o.headers.authorization=Zo(e),t(o)}var Dr=function(t){if(!t)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if(typeof t!="string")throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return t=t.replace(/^(token|bearer) +/i,""),Object.assign(Xo.bind(null,t),{hook:en.bind(null,t)})};var ht="6.1.4";var Fr=()=>{},tn=console.warn.bind(console),rn=console.error.bind(console),xr=`octokit-core.js/${ht} ${I()}`,J=class{constructor(t={}){E(this,"request");E(this,"graphql");E(this,"log");E(this,"hook");E(this,"auth");let r=new gr.Collection,s={baseUrl:P.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},t.request,{hook:r.bind(null,"request")}),mediaType:{previews:[],format:""}};if(s.headers["user-agent"]=t.userAgent?`${t.userAgent} ${xr}`:xr,t.baseUrl&&(s.baseUrl=t.baseUrl),t.previews&&(s.mediaType.previews=t.previews),t.timeZone&&(s.headers["time-zone"]=t.timeZone),this.request=P.defaults(s),this.graphql=Ar(this.request).defaults(s),this.log=Object.assign({debug:Fr,info:Fr,warn:tn,error:rn},t.log),this.hook=r,t.authStrategy){let{authStrategy:n,...i}=t,c=n(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:i},t.auth));r.wrap("request",c.hook),this.auth=c}else if(!t.auth)this.auth=async()=>({type:"unauthenticated"});else{let n=Dr(t.auth);r.wrap("request",n.hook),this.auth=n}let o=this.constructor;for(let n=0;n<o.plugins.length;++n)Object.assign(this,o.plugins[n](this,t))}static defaults(t){return class extends this{constructor(...s){let o=s[0]||{};if(typeof t=="function"){super(t(o));return}super(Object.assign({},t,o,o.userAgent&&t.userAgent?{userAgent:`${o.userAgent} ${t.userAgent}`}:null))}}}static plugin(...t){var o;let r=this.plugins;return o=class extends this{},E(o,"plugins",r.concat(t.filter(n=>!r.includes(n)))),o}};E(J,"VERSION",ht),E(J,"plugins",[]);var sn="0.0.0-development";function on(e){if(!e.data)return{...e,data:[]};if(!("total_count"in e.data&&!("url"in e.data)))return e;let r=e.data.incomplete_results,s=e.data.repository_selection,o=e.data.total_count;delete e.data.incomplete_results,delete e.data.repository_selection,delete e.data.total_count;let n=Object.keys(e.data)[0],i=e.data[n];return e.data=i,typeof r!="undefined"&&(e.data.incomplete_results=r),typeof s!="undefined"&&(e.data.repository_selection=s),e.data.total_count=o,e}function gt(e,t,r){let s=typeof t=="function"?t.endpoint(r):e.request.endpoint(t,r),o=typeof t=="function"?t:e.request,n=s.method,i=s.headers,c=s.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!c)return{done:!0};try{let u=await o({method:n,url:c,headers:i}),p=on(u);return c=((p.headers.link||"").match(/<([^<>]+)>;\s*rel="next"/)||[])[1],{value:p}}catch(u){if(u.status!==409)throw u;return c="",{value:{status:200,headers:{},data:[]}}}}})}}function Ir(e,t,r,s){return typeof r=="function"&&(s=r,r=void 0),qr(e,[],gt(e,t,r)[Symbol.asyncIterator](),s)}function qr(e,t,r,s){return r.next().then(o=>{if(o.done)return t;let n=!1;function i(){n=!0}return t=t.concat(s?s(o.value,i):o.value.data),n?t:qr(e,t,r,s)})}var xe=Object.assign(Ir,{iterator:gt});function mt(e){return{paginate:Object.assign(Ir.bind(null,e),{iterator:gt.bind(null,e)})}}mt.VERSION=sn;var nn=(e,t)=>`The cursor at "${e.join(",")}" did not change its value "${t}" after a page transition. Please make sure your that your query is set up correctly.`,an=class extends Error{constructor(t,r){super(nn(t.pathInQuery,r));E(this,"name","MissingCursorChangeError");this.pageInfo=t,this.cursorValue=r,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},cn=class extends Error{constructor(t){super(`No pageInfo property found in response. Please make sure to specify the pageInfo in your query. Response-Data: ${JSON.stringify(t,null,2)}`);E(this,"name","MissingPageInfo");this.response=t,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},un=e=>Object.prototype.toString.call(e)==="[object Object]";function jr(e){let t=Ur(e,"pageInfo");if(t.length===0)throw new cn(e);return t}var Ur=(e,t,r=[])=>{for(let s of Object.keys(e)){let o=[...r,s],n=e[s];if(un(n)){if(n.hasOwnProperty(t))return o;let i=Ur(n,t,o);if(i.length>0)return i}}return[]},ve=(e,t)=>t.reduce((r,s)=>r[s],e),ft=(e,t,r)=>{let s=t[t.length-1],o=[...t].slice(0,-1),n=ve(e,o);typeof r=="function"?n[s]=r(n[s]):n[s]=r},ln=e=>{let t=jr(e);return{pathInQuery:t,pageInfo:ve(e,[...t,"pageInfo"])}},Mr=e=>e.hasOwnProperty("hasNextPage"),pn=e=>Mr(e)?e.endCursor:e.startCursor,dn=e=>Mr(e)?e.hasNextPage:e.hasPreviousPage,$r=e=>(t,r={})=>{let s=!0,o={...r};return{[Symbol.asyncIterator]:()=>({async next(){if(!s)return{done:!0,value:{}};let n=await e.graphql(t,o),i=ln(n),c=pn(i.pageInfo);if(s=dn(i.pageInfo),s&&c===o.cursor)throw new an(i,c);return o={...o,cursor:c},{done:!1,value:n}}})}},hn=(e,t)=>{if(Object.keys(e).length===0)return Object.assign(e,t);let r=jr(e),s=[...r,"nodes"],o=ve(t,s);o&&ft(e,s,u=>[...u,...o]);let n=[...r,"edges"],i=ve(t,n);i&&ft(e,n,u=>[...u,...i]);let c=[...r,"pageInfo"];return ft(e,c,ve(t,c)),e},gn=e=>{let t=$r(e);return async(r,s={})=>{let o={};for await(let n of t(r,s))o=hn(o,n);return o}};function Lr(e){return{graphql:Object.assign(e.graphql,{paginate:Object.assign(gn(e),{iterator:$r(e)})})}}var wt="13.5.0";var mn={actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addRepoAccessToSelfHostedRunnerGroupInOrg:["PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createEnvironmentVariable:["POST /repos/{owner}/{repo}/environments/{environment_name}/variables"],createHostedRunnerForOrg:["POST /orgs/{org}/actions/hosted-runners"],createOrUpdateEnvironmentSecret:["PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createOrgVariable:["POST /orgs/{org}/actions/variables"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createRepoVariable:["POST /repos/{owner}/{repo}/actions/variables"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],deleteEnvironmentVariable:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],deleteHostedRunnerForOrg:["DELETE /orgs/{org}/actions/hosted-runners/{hosted_runner_id}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteRepoVariable:["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],forceCancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"],generateRunnerJitconfigForOrg:["POST /orgs/{org}/actions/runners/generate-jitconfig"],generateRunnerJitconfigForRepo:["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getCustomOidcSubClaimForRepo:["GET /repos/{owner}/{repo}/actions/oidc/customization/sub"],getEnvironmentPublicKey:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],getEnvironmentVariable:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getHostedRunnerForOrg:["GET /orgs/{org}/actions/hosted-runners/{hosted_runner_id}"],getHostedRunnersGithubOwnedImagesForOrg:["GET /orgs/{org}/actions/hosted-runners/images/github-owned"],getHostedRunnersLimitsForOrg:["GET /orgs/{org}/actions/hosted-runners/limits"],getHostedRunnersMachineSpecsForOrg:["GET /orgs/{org}/actions/hosted-runners/machine-sizes"],getHostedRunnersPartnerImagesForOrg:["GET /orgs/{org}/actions/hosted-runners/images/partner"],getHostedRunnersPlatformsForOrg:["GET /orgs/{org}/actions/hosted-runners/platforms"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getOrgVariable:["GET /orgs/{org}/actions/variables/{name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getRepoVariable:["GET /repos/{owner}/{repo}/actions/variables/{name}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets"],listEnvironmentVariables:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables"],listGithubHostedRunnersInGroupForOrg:["GET /orgs/{org}/actions/runner-groups/{runner_group_id}/hosted-runners"],listHostedRunnersForOrg:["GET /orgs/{org}/actions/hosted-runners"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listOrgVariables:["GET /orgs/{org}/actions/variables"],listRepoOrganizationSecrets:["GET /repos/{owner}/{repo}/actions/organization-secrets"],listRepoOrganizationVariables:["GET /repos/{owner}/{repo}/actions/organization-variables"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoVariables:["GET /repos/{owner}/{repo}/actions/variables"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedReposForOrgVariable:["GET /orgs/{org}/actions/variables/{name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],reviewCustomGatesForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setCustomOidcSubClaimForRepo:["PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedReposForOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"],updateEnvironmentVariable:["PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],updateHostedRunnerForOrg:["PATCH /orgs/{org}/actions/hosted-runners/{hosted_runner_id}"],updateOrgVariable:["PATCH /orgs/{org}/actions/variables/{name}"],updateRepoVariable:["PATCH /repos/{owner}/{repo}/actions/variables/{name}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsDone:["DELETE /notifications/threads/{thread_id}"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallationRequestsForAuthenticatedApp:["GET /app/installation-requests"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubBillingUsageReportOrg:["GET /organizations/{org}/settings/billing/usage"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{commitAutofix:["POST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix/commits"],createAutofix:["POST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix"],createVariantAnalysis:["POST /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses"],deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],deleteCodeqlDatabase:["DELETE /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getAutofix:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getDefaultSetup:["GET /repos/{owner}/{repo}/code-scanning/default-setup"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],getVariantAnalysis:["GET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}"],getVariantAnalysisRepoTask:["GET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}/repos/{repo_owner}/{repo_name}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],updateDefaultSetup:["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codeSecurity:{attachConfiguration:["POST /orgs/{org}/code-security/configurations/{configuration_id}/attach"],attachEnterpriseConfiguration:["POST /enterprises/{enterprise}/code-security/configurations/{configuration_id}/attach"],createConfiguration:["POST /orgs/{org}/code-security/configurations"],createConfigurationForEnterprise:["POST /enterprises/{enterprise}/code-security/configurations"],deleteConfiguration:["DELETE /orgs/{org}/code-security/configurations/{configuration_id}"],deleteConfigurationForEnterprise:["DELETE /enterprises/{enterprise}/code-security/configurations/{configuration_id}"],detachConfiguration:["DELETE /orgs/{org}/code-security/configurations/detach"],getConfiguration:["GET /orgs/{org}/code-security/configurations/{configuration_id}"],getConfigurationForRepository:["GET /repos/{owner}/{repo}/code-security-configuration"],getConfigurationsForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations"],getConfigurationsForOrg:["GET /orgs/{org}/code-security/configurations"],getDefaultConfigurations:["GET /orgs/{org}/code-security/configurations/defaults"],getDefaultConfigurationsForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations/defaults"],getRepositoriesForConfiguration:["GET /orgs/{org}/code-security/configurations/{configuration_id}/repositories"],getRepositoriesForEnterpriseConfiguration:["GET /enterprises/{enterprise}/code-security/configurations/{configuration_id}/repositories"],getSingleConfigurationForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations/{configuration_id}"],setConfigurationAsDefault:["PUT /orgs/{org}/code-security/configurations/{configuration_id}/defaults"],setConfigurationAsDefaultForEnterprise:["PUT /enterprises/{enterprise}/code-security/configurations/{configuration_id}/defaults"],updateConfiguration:["PATCH /orgs/{org}/code-security/configurations/{configuration_id}"],updateEnterpriseConfiguration:["PATCH /enterprises/{enterprise}/code-security/configurations/{configuration_id}"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],checkPermissionsForDevcontainer:["GET /repos/{owner}/{repo}/codespaces/permissions_check"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getCodespacesForUserInOrg:["GET /orgs/{org}/members/{username}/codespaces"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /orgs/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /orgs/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],publishForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/publish"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},copilot:{addCopilotSeatsForTeams:["POST /orgs/{org}/copilot/billing/selected_teams"],addCopilotSeatsForUsers:["POST /orgs/{org}/copilot/billing/selected_users"],cancelCopilotSeatAssignmentForTeams:["DELETE /orgs/{org}/copilot/billing/selected_teams"],cancelCopilotSeatAssignmentForUsers:["DELETE /orgs/{org}/copilot/billing/selected_users"],copilotMetricsForOrganization:["GET /orgs/{org}/copilot/metrics"],copilotMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/metrics"],getCopilotOrganizationDetails:["GET /orgs/{org}/copilot/billing"],getCopilotSeatDetailsForUser:["GET /orgs/{org}/members/{username}/copilot"],listCopilotSeats:["GET /orgs/{org}/copilot/billing/seats"],usageMetricsForOrg:["GET /orgs/{org}/copilot/usage"],usageMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/usage"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/dependabot/alerts"],listAlertsForOrg:["GET /orgs/{org}/dependabot/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],exportSbom:["GET /repos/{owner}/{repo}/dependency-graph/sbom"]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},hostedCompute:{createNetworkConfigurationForOrg:["POST /orgs/{org}/settings/network-configurations"],deleteNetworkConfigurationFromOrg:["DELETE /orgs/{org}/settings/network-configurations/{network_configuration_id}"],getNetworkConfigurationForOrg:["GET /orgs/{org}/settings/network-configurations/{network_configuration_id}"],getNetworkSettingsForOrg:["GET /orgs/{org}/settings/network-settings/{network_settings_id}"],listNetworkConfigurationsForOrg:["GET /orgs/{org}/settings/network-configurations"],updateNetworkConfigurationForOrg:["PATCH /orgs/{org}/settings/network-configurations/{network_configuration_id}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],addSubIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/sub_issues"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],checkUserCanBeAssignedToIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],listSubIssues:["GET /repos/{owner}/{repo}/issues/{issue_number}/sub_issues"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],removeSubIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/sub_issue"],reprioritizeSubIssue:["PATCH /repos/{owner}/{repo}/issues/{issue_number}/sub_issues/priority"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getAllVersions:["GET /versions"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"]},oidc:{getOidcCustomSubTemplateForOrg:["GET /orgs/{org}/actions/oidc/customization/sub"],updateOidcCustomSubTemplateForOrg:["PUT /orgs/{org}/actions/oidc/customization/sub"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}",{},{deprecated:"octokit.rest.orgs.addSecurityManagerTeam() is deprecated, see https://docs.github.com/rest/orgs/security-managers#add-a-security-manager-team"}],assignTeamToOrgRole:["PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],assignUserToOrgRole:["PUT /orgs/{org}/organization-roles/users/{username}/{role_id}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createInvitation:["POST /orgs/{org}/invitations"],createIssueType:["POST /orgs/{org}/issue-types"],createOrUpdateCustomProperties:["PATCH /orgs/{org}/properties/schema"],createOrUpdateCustomPropertiesValuesForRepos:["PATCH /orgs/{org}/properties/values"],createOrUpdateCustomProperty:["PUT /orgs/{org}/properties/schema/{custom_property_name}"],createWebhook:["POST /orgs/{org}/hooks"],delete:["DELETE /orgs/{org}"],deleteIssueType:["DELETE /orgs/{org}/issue-types/{issue_type_id}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}",{},{deprecated:"octokit.rest.orgs.enableOrDisableSecurityProductOnAllOrgRepos() is deprecated, see https://docs.github.com/rest/orgs/orgs#enable-or-disable-a-security-feature-for-an-organization"}],get:["GET /orgs/{org}"],getAllCustomProperties:["GET /orgs/{org}/properties/schema"],getCustomProperty:["GET /orgs/{org}/properties/schema/{custom_property_name}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getOrgRole:["GET /orgs/{org}/organization-roles/{role_id}"],getOrgRulesetHistory:["GET /orgs/{org}/rulesets/{ruleset_id}/history"],getOrgRulesetVersion:["GET /orgs/{org}/rulesets/{ruleset_id}/history/{version_id}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listAttestations:["GET /orgs/{org}/attestations/{subject_digest}"],listBlockedUsers:["GET /orgs/{org}/blocks"],listCustomPropertiesValuesForRepos:["GET /orgs/{org}/properties/values"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listIssueTypes:["GET /orgs/{org}/issue-types"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOrgRoleTeams:["GET /orgs/{org}/organization-roles/{role_id}/teams"],listOrgRoleUsers:["GET /orgs/{org}/organization-roles/{role_id}/users"],listOrgRoles:["GET /orgs/{org}/organization-roles"],listOrganizationFineGrainedPermissions:["GET /orgs/{org}/organization-fine-grained-permissions"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPatGrantRepositories:["GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"],listPatGrantRequestRepositories:["GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"],listPatGrantRequests:["GET /orgs/{org}/personal-access-token-requests"],listPatGrants:["GET /orgs/{org}/personal-access-tokens"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers",{},{deprecated:"octokit.rest.orgs.listSecurityManagerTeams() is deprecated, see https://docs.github.com/rest/orgs/security-managers#list-security-manager-teams"}],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeCustomProperty:["DELETE /orgs/{org}/properties/schema/{custom_property_name}"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}",{},{deprecated:"octokit.rest.orgs.removeSecurityManagerTeam() is deprecated, see https://docs.github.com/rest/orgs/security-managers#remove-a-security-manager-team"}],reviewPatGrantRequest:["POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"],reviewPatGrantRequestsInBulk:["POST /orgs/{org}/personal-access-token-requests"],revokeAllOrgRolesTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}"],revokeAllOrgRolesUser:["DELETE /orgs/{org}/organization-roles/users/{username}"],revokeOrgRoleTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],revokeOrgRoleUser:["DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateIssueType:["PUT /orgs/{org}/issue-types/{issue_type_id}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updatePatAccess:["POST /orgs/{org}/personal-access-tokens/{pat_id}"],updatePatAccesses:["POST /orgs/{org}/personal-access-tokens"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listDockerMigrationConflictingPackagesForAuthenticatedUser:["GET /user/docker/conflicts"],listDockerMigrationConflictingPackagesForOrganization:["GET /orgs/{org}/docker/conflicts"],listDockerMigrationConflictingPackagesForUser:["GET /users/{username}/docker/conflicts"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},privateRegistries:{createOrgPrivateRegistry:["POST /orgs/{org}/private-registries"],deleteOrgPrivateRegistry:["DELETE /orgs/{org}/private-registries/{secret_name}"],getOrgPrivateRegistry:["GET /orgs/{org}/private-registries/{secret_name}"],getOrgPublicKey:["GET /orgs/{org}/private-registries/public-key"],listOrgPrivateRegistries:["GET /orgs/{org}/private-registries"],updateOrgPrivateRegistry:["PATCH /orgs/{org}/private-registries/{secret_name}"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}",{},{deprecated:"octokit.rest.projects.addCollaborator() is deprecated, see https://docs.github.com/rest/projects/collaborators#add-project-collaborator"}],createCard:["POST /projects/columns/{column_id}/cards",{},{deprecated:"octokit.rest.projects.createCard() is deprecated, see https://docs.github.com/rest/projects/cards#create-a-project-card"}],createColumn:["POST /projects/{project_id}/columns",{},{deprecated:"octokit.rest.projects.createColumn() is deprecated, see https://docs.github.com/rest/projects/columns#create-a-project-column"}],createForAuthenticatedUser:["POST /user/projects",{},{deprecated:"octokit.rest.projects.createForAuthenticatedUser() is deprecated, see https://docs.github.com/rest/projects/projects#create-a-user-project"}],createForOrg:["POST /orgs/{org}/projects",{},{deprecated:"octokit.rest.projects.createForOrg() is deprecated, see https://docs.github.com/rest/projects/projects#create-an-organization-project"}],createForRepo:["POST /repos/{owner}/{repo}/projects",{},{deprecated:"octokit.rest.projects.createForRepo() is deprecated, see https://docs.github.com/rest/projects/projects#create-a-repository-project"}],delete:["DELETE /projects/{project_id}",{},{deprecated:"octokit.rest.projects.delete() is deprecated, see https://docs.github.com/rest/projects/projects#delete-a-project"}],deleteCard:["DELETE /projects/columns/cards/{card_id}",{},{deprecated:"octokit.rest.projects.deleteCard() is deprecated, see https://docs.github.com/rest/projects/cards#delete-a-project-card"}],deleteColumn:["DELETE /projects/columns/{column_id}",{},{deprecated:"octokit.rest.projects.deleteColumn() is deprecated, see https://docs.github.com/rest/projects/columns#delete-a-project-column"}],get:["GET /projects/{project_id}",{},{deprecated:"octokit.rest.projects.get() is deprecated, see https://docs.github.com/rest/projects/projects#get-a-project"}],getCard:["GET /projects/columns/cards/{card_id}",{},{deprecated:"octokit.rest.projects.getCard() is deprecated, see https://docs.github.com/rest/projects/cards#get-a-project-card"}],getColumn:["GET /projects/columns/{column_id}",{},{deprecated:"octokit.rest.projects.getColumn() is deprecated, see https://docs.github.com/rest/projects/columns#get-a-project-column"}],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission",{},{deprecated:"octokit.rest.projects.getPermissionForUser() is deprecated, see https://docs.github.com/rest/projects/collaborators#get-project-permission-for-a-user"}],listCards:["GET /projects/columns/{column_id}/cards",{},{deprecated:"octokit.rest.projects.listCards() is deprecated, see https://docs.github.com/rest/projects/cards#list-project-cards"}],listCollaborators:["GET /projects/{project_id}/collaborators",{},{deprecated:"octokit.rest.projects.listCollaborators() is deprecated, see https://docs.github.com/rest/projects/collaborators#list-project-collaborators"}],listColumns:["GET /projects/{project_id}/columns",{},{deprecated:"octokit.rest.projects.listColumns() is deprecated, see https://docs.github.com/rest/projects/columns#list-project-columns"}],listForOrg:["GET /orgs/{org}/projects",{},{deprecated:"octokit.rest.projects.listForOrg() is deprecated, see https://docs.github.com/rest/projects/projects#list-organization-projects"}],listForRepo:["GET /repos/{owner}/{repo}/projects",{},{deprecated:"octokit.rest.projects.listForRepo() is deprecated, see https://docs.github.com/rest/projects/projects#list-repository-projects"}],listForUser:["GET /users/{username}/projects",{},{deprecated:"octokit.rest.projects.listForUser() is deprecated, see https://docs.github.com/rest/projects/projects#list-user-projects"}],moveCard:["POST /projects/columns/cards/{card_id}/moves",{},{deprecated:"octokit.rest.projects.moveCard() is deprecated, see https://docs.github.com/rest/projects/cards#move-a-project-card"}],moveColumn:["POST /projects/columns/{column_id}/moves",{},{deprecated:"octokit.rest.projects.moveColumn() is deprecated, see https://docs.github.com/rest/projects/columns#move-a-project-column"}],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}",{},{deprecated:"octokit.rest.projects.removeCollaborator() is deprecated, see https://docs.github.com/rest/projects/collaborators#remove-user-as-a-collaborator"}],update:["PATCH /projects/{project_id}",{},{deprecated:"octokit.rest.projects.update() is deprecated, see https://docs.github.com/rest/projects/projects#update-a-project"}],updateCard:["PATCH /projects/columns/cards/{card_id}",{},{deprecated:"octokit.rest.projects.updateCard() is deprecated, see https://docs.github.com/rest/projects/cards#update-an-existing-project-card"}],updateColumn:["PATCH /projects/columns/{column_id}",{},{deprecated:"octokit.rest.projects.updateColumn() is deprecated, see https://docs.github.com/rest/projects/columns#update-an-existing-project-column"}]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],cancelPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"],checkAutomatedSecurityFixes:["GET /repos/{owner}/{repo}/automated-security-fixes"],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkPrivateVulnerabilityReporting:["GET /repos/{owner}/{repo}/private-vulnerability-reporting"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAttestation:["POST /repos/{owner}/{repo}/attestations"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentProtectionRule:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateCustomPropertiesValues:["PATCH /repos/{owner}/{repo}/properties/values"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createOrgRuleset:["POST /orgs/{org}/rulesets"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createRepoRuleset:["POST /repos/{owner}/{repo}/rulesets"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteOrgRuleset:["DELETE /orgs/{org}/rulesets/{ruleset_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteRepoRuleset:["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableDeploymentProtectionRule:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],disablePrivateVulnerabilityReporting:["DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enablePrivateVulnerabilityReporting:["PUT /repos/{owner}/{repo}/private-vulnerability-reporting"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllDeploymentProtectionRules:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getBranchRules:["GET /repos/{owner}/{repo}/rules/branches/{branch}"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getCustomDeploymentProtectionRule:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],getCustomPropertiesValues:["GET /repos/{owner}/{repo}/properties/values"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getOrgRuleSuite:["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],getOrgRuleSuites:["GET /orgs/{org}/rulesets/rule-suites"],getOrgRuleset:["GET /orgs/{org}/rulesets/{ruleset_id}"],getOrgRulesets:["GET /orgs/{org}/rulesets"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesDeployment:["GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getRepoRuleSuite:["GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"],getRepoRuleSuites:["GET /repos/{owner}/{repo}/rulesets/rule-suites"],getRepoRuleset:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],getRepoRulesetHistory:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}/history"],getRepoRulesetVersion:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}/history/{version_id}"],getRepoRulesets:["GET /repos/{owner}/{repo}/rulesets"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listActivities:["GET /repos/{owner}/{repo}/activity"],listAttestations:["GET /repos/{owner}/{repo}/attestations/{subject_digest}"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listCustomDeploymentRuleIntegrations:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateOrgRuleset:["PUT /orgs/{org}/rulesets/{ruleset_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateRepoRuleset:["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues",{},{deprecated:"octokit.rest.search.issuesAndPullRequests() is deprecated, see https://docs.github.com/rest/search/search#search-issues-and-pull-requests"}],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{createPushProtectionBypass:["POST /repos/{owner}/{repo}/secret-scanning/push-protection-bypasses"],getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],getScanHistory:["GET /repos/{owner}/{repo}/secret-scanning/scan-history"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},securityAdvisories:{createFork:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"],createPrivateVulnerabilityReport:["POST /repos/{owner}/{repo}/security-advisories/reports"],createRepositoryAdvisory:["POST /repos/{owner}/{repo}/security-advisories"],createRepositoryAdvisoryCveRequest:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"],getGlobalAdvisory:["GET /advisories/{ghsa_id}"],getRepositoryAdvisory:["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],listGlobalAdvisories:["GET /advisories"],listOrgRepositoryAdvisories:["GET /orgs/{org}/security-advisories"],listRepositoryAdvisories:["GET /repos/{owner}/{repo}/security-advisories"],updateRepositoryAdvisory:["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}",{},{deprecated:"octokit.rest.teams.addOrUpdateProjectPermissionsInOrg() is deprecated, see https://docs.github.com/rest/teams/teams#add-or-update-team-project-permissions"}],addOrUpdateProjectPermissionsLegacy:["PUT /teams/{team_id}/projects/{project_id}",{},{deprecated:"octokit.rest.teams.addOrUpdateProjectPermissionsLegacy() is deprecated, see https://docs.github.com/rest/teams/teams#add-or-update-team-project-permissions-legacy"}],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}",{},{deprecated:"octokit.rest.teams.checkPermissionsForProjectInOrg() is deprecated, see https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-project"}],checkPermissionsForProjectLegacy:["GET /teams/{team_id}/projects/{project_id}",{},{deprecated:"octokit.rest.teams.checkPermissionsForProjectLegacy() is deprecated, see https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-project-legacy"}],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects",{},{deprecated:"octokit.rest.teams.listProjectsInOrg() is deprecated, see https://docs.github.com/rest/teams/teams#list-team-projects"}],listProjectsLegacy:["GET /teams/{team_id}/projects",{},{deprecated:"octokit.rest.teams.listProjectsLegacy() is deprecated, see https://docs.github.com/rest/teams/teams#list-team-projects-legacy"}],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}",{},{deprecated:"octokit.rest.teams.removeProjectInOrg() is deprecated, see https://docs.github.com/rest/teams/teams#remove-a-project-from-a-team"}],removeProjectLegacy:["DELETE /teams/{team_id}/projects/{project_id}",{},{deprecated:"octokit.rest.teams.removeProjectLegacy() is deprecated, see https://docs.github.com/rest/teams/teams#remove-a-project-from-a-team-legacy"}],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],addSocialAccountForAuthenticatedUser:["POST /user/social_accounts"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSocialAccountForAuthenticatedUser:["DELETE /user/social_accounts"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getById:["GET /user/{account_id}"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listAttestations:["GET /users/{username}/attestations/{subject_digest}"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSocialAccountsForAuthenticatedUser:["GET /user/social_accounts"],listSocialAccountsForUser:["GET /users/{username}/social_accounts"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}},Hr=mn;var oe=new Map;for(let[e,t]of Object.entries(Hr))for(let[r,s]of Object.entries(t)){let[o,n,i]=s,[c,u]=o.split(/ /),p=Object.assign({method:c,url:u},n);oe.has(e)||oe.set(e,new Map),oe.get(e).set(r,{scope:e,methodName:r,endpointDefaults:p,decorations:i})}var fn={has({scope:e},t){return oe.get(e).has(t)},getOwnPropertyDescriptor(e,t){return{value:this.get(e,t),configurable:!0,writable:!0,enumerable:!0}},defineProperty(e,t,r){return Object.defineProperty(e.cache,t,r),!0},deleteProperty(e,t){return delete e.cache[t],!0},ownKeys({scope:e}){return[...oe.get(e).keys()]},set(e,t,r){return e.cache[t]=r},get({octokit:e,scope:t,cache:r},s){if(r[s])return r[s];let o=oe.get(t).get(s);if(!o)return;let{endpointDefaults:n,decorations:i}=o;return i?r[s]=wn(e,t,s,n,i):r[s]=e.request.defaults(n),r[s]}};function yt(e){let t={};for(let r of oe.keys())t[r]=new Proxy({octokit:e,scope:r,cache:{}},fn);return t}function wn(e,t,r,s,o){let n=e.request.defaults(s);function i(...c){let u=n.endpoint.merge(...c);if(o.mapToData)return u=Object.assign({},u,{data:u[o.mapToData],[o.mapToData]:void 0}),n(u);if(o.renamed){let[p,m]=o.renamed;e.log.warn(`octokit.${t}.${r}() has been renamed to octokit.${p}.${m}()`)}if(o.deprecated&&e.log.warn(o.deprecated),o.renamedParameters){let p=n.endpoint.merge(...c);for(let[m,w]of Object.entries(o.renamedParameters))m in p&&(e.log.warn(`"${m}" parameter is deprecated for "octokit.${t}.${r}()". Use "${w}" instead`),w in p||(p[w]=p[m]),delete p[m]);return n(p)}return n(...c)}return Object.assign(i,n)}function bt(e){return{rest:yt(e)}}bt.VERSION=wt;function yn(e){let t=yt(e);return{...t,rest:t}}yn.VERSION=wt;var Wr=nt(_t(),1);var bn="0.0.0-development";async function Nr(e,t,r,s){if(!r.request||!r.request.request)throw r;if(r.status>=400&&!e.doNotRetry.includes(r.status)){let o=s.request.retries!=null?s.request.retries:e.retries,n=Math.pow((s.request.retryCount||0)+1,2);throw t.retry.retryRequest(r,o,n)}throw r}async function Tn(e,t,r,s){let o=new Wr.default;return o.on("failed",function(n,i){let c=~~n.request.request.retries,u=~~n.request.request.retryAfter;if(s.request.retryCount=i.retryCount+1,c>i.retryCount)return u*e.retryAfterBaseValue}),o.schedule(En.bind(null,e,t,r),s)}async function En(e,t,r,s){let o=await r(r,s);if(o.data&&o.data.errors&&o.data.errors.length>0&&/Something went wrong while executing your query/.test(o.data.errors[0].message)){let n=new V(o.data.errors[0].message,500,{request:s,response:o});return Nr(e,t,n,s)}return o}function vt(e,t){let r=Object.assign({enabled:!0,retryAfterBaseValue:1e3,doNotRetry:[400,401,403,404,410,422,451],retries:3},t.retry);return r.enabled&&(e.hook.error("request",Nr.bind(null,r,e)),e.hook.wrap("request",Tn.bind(null,r,e))),{retry:{retryRequest:(s,o,n)=>(s.request.request=Object.assign({},s.request.request,{retries:o,retryAfter:n}),s)}}}vt.VERSION=bn;var zr=nt(_t(),1),_n="0.0.0-development",kt=()=>Promise.resolve();function vn(e,t,r){return e.retryLimiter.schedule(kn,e,t,r)}async function kn(e,t,r){let s=r.method!=="GET"&&r.method!=="HEAD",{pathname:o}=new URL(r.url,"http://github.test"),n=r.method==="GET"&&o.startsWith("/search/"),i=o.startsWith("/graphql"),u=~~t.retryCount>0?{priority:0,weight:0}:{};e.clustering&&(u.expiration=1e3*60),(s||i)&&await e.write.key(e.id).schedule(u,kt),s&&e.triggersNotification(o)&&await e.notifications.key(e.id).schedule(u,kt),n&&await e.search.key(e.id).schedule(u,kt);let p=e.global.key(e.id).schedule(u,t,r);if(i){let m=await p;if(m.data.errors!=null&&m.data.errors.some(w=>w.type==="RATE_LIMITED"))throw Object.assign(new Error("GraphQL Rate Limit Exceeded"),{response:m,data:m.data})}return p}var On=["/orgs/{org}/invitations","/orgs/{org}/invitations/{invitation_id}","/orgs/{org}/teams/{team_slug}/discussions","/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments","/repos/{owner}/{repo}/collaborators/{username}","/repos/{owner}/{repo}/commits/{commit_sha}/comments","/repos/{owner}/{repo}/issues","/repos/{owner}/{repo}/issues/{issue_number}/comments","/repos/{owner}/{repo}/issues/{issue_number}/sub_issue","/repos/{owner}/{repo}/issues/{issue_number}/sub_issues/priority","/repos/{owner}/{repo}/pulls","/repos/{owner}/{repo}/pulls/{pull_number}/comments","/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies","/repos/{owner}/{repo}/pulls/{pull_number}/merge","/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers","/repos/{owner}/{repo}/pulls/{pull_number}/reviews","/repos/{owner}/{repo}/releases","/teams/{team_id}/discussions","/teams/{team_id}/discussions/{discussion_number}/comments"];function Sn(e){let r=`^(?:${e.map(s=>s.split("/").map(o=>o.startsWith("{")?"(?:.+?)":o).join("/")).map(s=>`(?:${s})`).join("|")})[^/]*$`;return new RegExp(r,"i")}var Br=Sn(On),Vr=Br.test.bind(Br),he={},Gn=function(e,t){he.global=new e.Group({id:"octokit-global",maxConcurrent:10,...t}),he.search=new e.Group({id:"octokit-search",maxConcurrent:1,minTime:2e3,...t}),he.write=new e.Group({id:"octokit-write",maxConcurrent:1,minTime:1e3,...t}),he.notifications=new e.Group({id:"octokit-notifications",maxConcurrent:1,minTime:3e3,...t})};function Ie(e,t){let{enabled:r=!0,Bottleneck:s=zr.default,id:o="no-id",timeout:n=1e3*60*2,connection:i}=t.throttle||{};if(!r)return{};let c={timeout:n};typeof i!="undefined"&&(c.connection=i),he.global==null&&Gn(s,c);let u=Object.assign({clustering:i!=null,triggersNotification:Vr,fallbackSecondaryRateRetryAfter:60,retryAfterBaseValue:1e3,retryLimiter:new s,id:o,...he},t.throttle);if(typeof u.onSecondaryRateLimit!="function"||typeof u.onRateLimit!="function")throw new Error(`octokit/plugin-throttling error:
        You must pass the onSecondaryRateLimit and onRateLimit error handlers.
        See https://octokit.github.io/rest.js/#throttling

        const octokit = new Octokit({
          throttle: {
            onSecondaryRateLimit: (retryAfter, options) => {/* ... */},
            onRateLimit: (retryAfter, options) => {/* ... */}
          }
        })
    `);let p={},m=new s.Events(p);return p.on("secondary-limit",u.onSecondaryRateLimit),p.on("rate-limit",u.onRateLimit),p.on("error",w=>e.log.warn("Error in throttling-plugin limit handler",w)),u.retryLimiter.on("failed",async function(w,k){let[y,_,O]=k.args,{pathname:v}=new URL(O.url,"http://github.test");if(!(v.startsWith("/graphql")&&w.status!==401||w.status===403||w.status===429))return;let C=~~_.retryCount;_.retryCount=C,O.request.retryCount=C;let{wantRetry:Y,retryAfter:N=0}=await async function(){var j,W;if(/\bsecondary rate\b/i.test(w.message)){let U=Number(w.response.headers["retry-after"])||y.fallbackSecondaryRateRetryAfter;return{wantRetry:await m.trigger("secondary-limit",U,O,e,C),retryAfter:U}}if(w.response.headers!=null&&w.response.headers["x-ratelimit-remaining"]==="0"||((W=(j=w.response.data)==null?void 0:j.errors)!=null?W:[]).some(U=>U.type==="RATE_LIMITED")){let U=new Date(~~w.response.headers["x-ratelimit-reset"]*1e3).getTime(),B=Math.max(Math.ceil((U-Date.now())/1e3)+1,0);return{wantRetry:await m.trigger("rate-limit",B,O,e,C),retryAfter:B}}return{}}();if(Y)return _.retryCount++,N*y.retryAfterBaseValue}),e.hook.wrap("request",vn.bind(null,u)),{}}Ie.VERSION=_n;Ie.triggersNotification=Vr;function Yr(e){let t=e.clientType||"oauth-app",r=e.baseUrl||"https://github.com",s={clientType:t,allowSignup:e.allowSignup!==!1,clientId:e.clientId,login:e.login||null,redirectUrl:e.redirectUrl||null,state:e.state||Math.random().toString(36).substr(2),url:""};if(t==="oauth-app"){let o="scopes"in e?e.scopes:[];s.scopes=typeof o=="string"?o.split(/[,\s]+/).filter(Boolean):o}return s.url=Pn(`${r}/login/oauth/authorize`,s),s}function Pn(e,t){let r={allowSignup:"allow_signup",clientId:"client_id",login:"login",redirectUrl:"redirect_uri",scopes:"scope",state:"state"},s=e;return Object.keys(r).filter(o=>t[o]!==null).filter(o=>o!=="scopes"?!0:t.clientType==="github-app"?!1:!Array.isArray(t[o])||t[o].length>0).map(o=>[r[o],`${t[o]}`]).forEach(([o,n],i)=>{s+=i===0?"?":"&",s+=`${o}=${encodeURIComponent(n)}`}),s}function Xr(e){let t=e.endpoint.DEFAULTS;return/^https:\/\/(api\.)?github\.com$/.test(t.baseUrl)?"https://github.com":t.baseUrl.replace("/api/v3","")}async function qe(e,t,r){let s={baseUrl:Xr(e),headers:{accept:"application/json"},...r},o=await e(t,s);if("error"in o.data){let n=new V(`${o.data.error_description} (${o.data.error}, ${o.data.error_uri})`,400,{request:e.endpoint.merge(t,s)});throw n.response=o,n}return o}function Zr({request:e=P,...t}){let r=Xr(e);return Yr({...t,baseUrl:r})}async function es(e){let t=e.request||P,r=await qe(t,"POST /login/oauth/access_token",{client_id:e.clientId,client_secret:e.clientSecret,code:e.code,redirect_uri:e.redirectUrl}),s={clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:r.data.access_token,scopes:r.data.scope.split(/\s+/).filter(Boolean)};if(e.clientType==="github-app"){if("refresh_token"in r.data){let o=new Date(r.headers.date).getTime();s.refreshToken=r.data.refresh_token,s.expiresAt=Kr(o,r.data.expires_in),s.refreshTokenExpiresAt=Kr(o,r.data.refresh_token_expires_in)}delete s.scopes}return{...r,authentication:s}}function Kr(e,t){return new Date(e+t*1e3).toISOString()}async function ts(e){let t=e.request||P,r={client_id:e.clientId};return"scopes"in e&&Array.isArray(e.scopes)&&(r.scope=e.scopes.join(" ")),qe(t,"POST /login/device/code",r)}async function Ot(e){let t=e.request||P,r=await qe(t,"POST /login/oauth/access_token",{client_id:e.clientId,device_code:e.code,grant_type:"urn:ietf:params:oauth:grant-type:device_code"}),s={clientType:e.clientType,clientId:e.clientId,token:r.data.access_token,scopes:r.data.scope.split(/\s+/).filter(Boolean)};if("clientSecret"in e&&(s.clientSecret=e.clientSecret),e.clientType==="github-app"){if("refresh_token"in r.data){let o=new Date(r.headers.date).getTime();s.refreshToken=r.data.refresh_token,s.expiresAt=Jr(o,r.data.expires_in),s.refreshTokenExpiresAt=Jr(o,r.data.refresh_token_expires_in)}delete s.scopes}return{...r,authentication:s}}function Jr(e,t){return new Date(e+t*1e3).toISOString()}async function je(e){let r=await(e.request||P)("POST /applications/{client_id}/token",{headers:{authorization:`basic ${btoa(`${e.clientId}:${e.clientSecret}`)}`},client_id:e.clientId,access_token:e.token}),s={clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:e.token,scopes:r.data.scopes};return r.data.expires_at&&(s.expiresAt=r.data.expires_at),e.clientType==="github-app"&&delete s.scopes,{...r,authentication:s}}async function Ue(e){let t=e.request||P,r=await qe(t,"POST /login/oauth/access_token",{client_id:e.clientId,client_secret:e.clientSecret,grant_type:"refresh_token",refresh_token:e.refreshToken}),s=new Date(r.headers.date).getTime(),o={clientType:"github-app",clientId:e.clientId,clientSecret:e.clientSecret,token:r.data.access_token,refreshToken:r.data.refresh_token,expiresAt:Qr(s,r.data.expires_in),refreshTokenExpiresAt:Qr(s,r.data.refresh_token_expires_in)};return{...r,authentication:o}}function Qr(e,t){return new Date(e+t*1e3).toISOString()}async function rs(e){let{request:t,clientType:r,clientId:s,clientSecret:o,token:n,...i}=e,u=await(e.request||P)("POST /applications/{client_id}/token/scoped",{headers:{authorization:`basic ${btoa(`${s}:${o}`)}`},client_id:s,access_token:n,...i}),p=Object.assign({clientType:r,clientId:s,clientSecret:o,token:u.data.token},u.data.expires_at?{expiresAt:u.data.expires_at}:{});return{...u,authentication:p}}async function ke(e){let t=e.request||P,r=btoa(`${e.clientId}:${e.clientSecret}`),s=await t("PATCH /applications/{client_id}/token",{headers:{authorization:`basic ${r}`},client_id:e.clientId,access_token:e.token}),o={clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:s.data.token,scopes:s.data.scopes};return s.data.expires_at&&(o.expiresAt=s.data.expires_at),e.clientType==="github-app"&&delete o.scopes,{...s,authentication:o}}async function Oe(e){let t=e.request||P,r=btoa(`${e.clientId}:${e.clientSecret}`);return t("DELETE /applications/{client_id}/token",{headers:{authorization:`basic ${r}`},client_id:e.clientId,access_token:e.token})}async function Se(e){let t=e.request||P,r=btoa(`${e.clientId}:${e.clientSecret}`);return t("DELETE /applications/{client_id}/grant",{headers:{authorization:`basic ${r}`},client_id:e.clientId,access_token:e.token})}async function os(e,t){let r=An(e,t.auth);if(r)return r;let{data:s}=await ts({clientType:e.clientType,clientId:e.clientId,request:t.request||e.request,scopes:t.auth.scopes||e.scopes});await e.onVerification(s);let o=await St(t.request||e.request,e.clientId,e.clientType,s);return e.authentication=o,o}function An(e,t){if(t.refresh===!0||!e.authentication)return!1;if(e.clientType==="github-app")return e.authentication;let r=e.authentication,s=("scopes"in t&&t.scopes||e.scopes).join(" "),o=r.scopes.join(" ");return s===o?r:!1}async function ss(e){await new Promise(t=>setTimeout(t,e*1e3))}async function St(e,t,r,s){try{let o={clientId:t,request:e,code:s.device_code},{authentication:n}=r==="oauth-app"?await Ot({...o,clientType:"oauth-app"}):await Ot({...o,clientType:"github-app"});return{type:"token",tokenType:"oauth",...n}}catch(o){if(!o.response)throw o;let n=o.response.data.error;if(n==="authorization_pending")return await ss(s.interval),St(e,t,r,s);if(n==="slow_down")return await ss(s.interval+7),St(e,t,r,s);throw o}}async function Rn(e,t){return os(e,{auth:t})}async function Cn(e,t,r,s){let o=t.endpoint.merge(r,s);if(/\/login\/(oauth\/access_token|device\/code)$/.test(o.url))return t(o);let{token:n}=await os(e,{request:t,auth:{type:"oauth"}});return o.headers.authorization=`token ${n}`,t(o)}var Dn="0.0.0-development";function ns(e){let t=e.request||P.defaults({headers:{"user-agent":`octokit-auth-oauth-device.js/${Dn} ${I()}`}}),{request:r=t,...s}=e,o=e.clientType==="github-app"?{...s,clientType:"github-app",request:r}:{...s,clientType:"oauth-app",request:r,scopes:e.scopes||[]};if(!e.clientId)throw new Error('[@octokit/auth-oauth-device] "clientId" option must be set (https://github.com/octokit/auth-oauth-device.js#usage)');if(!e.onVerification)throw new Error('[@octokit/auth-oauth-device] "onVerification" option must be a function (https://github.com/octokit/auth-oauth-device.js#usage)');return Object.assign(Rn.bind(null,o),{hook:Cn.bind(null,o)})}var as="0.0.0-development";async function is(e){if("code"in e.strategyOptions){let{authentication:t}=await es({clientId:e.clientId,clientSecret:e.clientSecret,clientType:e.clientType,onTokenCreated:e.onTokenCreated,...e.strategyOptions,request:e.request});return{type:"token",tokenType:"oauth",...t}}if("onVerification"in e.strategyOptions){let r=await ns({clientType:e.clientType,clientId:e.clientId,onTokenCreated:e.onTokenCreated,...e.strategyOptions,request:e.request})({type:"oauth"});return{clientSecret:e.clientSecret,...r}}if("token"in e.strategyOptions)return{type:"token",tokenType:"oauth",clientId:e.clientId,clientSecret:e.clientSecret,clientType:e.clientType,onTokenCreated:e.onTokenCreated,...e.strategyOptions};throw new Error("[@octokit/auth-oauth-user] Invalid strategy options")}async function Gt(e,t={}){var s,o;if(e.authentication||(e.authentication=e.clientType==="oauth-app"?await is(e):await is(e)),e.authentication.invalid)throw new Error("[@octokit/auth-oauth-user] Token is invalid");let r=e.authentication;if("expiresAt"in r&&(t.type==="refresh"||new Date(r.expiresAt)<new Date)){let{authentication:n}=await Ue({clientType:"github-app",clientId:e.clientId,clientSecret:e.clientSecret,refreshToken:r.refreshToken,request:e.request});e.authentication={tokenType:"oauth",type:"token",...n}}if(t.type==="refresh"){if(e.clientType==="oauth-app")throw new Error("[@octokit/auth-oauth-user] OAuth Apps do not support expiring tokens");if(!r.hasOwnProperty("expiresAt"))throw new Error("[@octokit/auth-oauth-user] Refresh token missing");await((s=e.onTokenCreated)==null?void 0:s.call(e,e.authentication,{type:t.type}))}if(t.type==="check"||t.type==="reset"){let n=t.type==="check"?je:ke;try{let{authentication:i}=await n({clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:e.authentication.token,request:e.request});return e.authentication={tokenType:"oauth",type:"token",...i},t.type==="reset"&&await((o=e.onTokenCreated)==null?void 0:o.call(e,e.authentication,{type:t.type})),e.authentication}catch(i){throw i.status===404&&(i.message="[@octokit/auth-oauth-user] Token is invalid",e.authentication.invalid=!0),i}}if(t.type==="delete"||t.type==="deleteAuthorization"){let n=t.type==="delete"?Oe:Se;try{await n({clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:e.authentication.token,request:e.request})}catch(i){if(i.status!==404)throw i}return e.authentication.invalid=!0,e.authentication}return e.authentication}var Fn=/\/applications\/[^/]+\/(token|grant)s?/;function Ge(e){return e&&Fn.test(e)}async function xn(e,t,r,s={}){let o=t.endpoint.merge(r,s);if(/\/login\/(oauth\/access_token|device\/code)$/.test(o.url))return t(o);if(Ge(o.url)){let i=btoa(`${e.clientId}:${e.clientSecret}`);return o.headers.authorization=`basic ${i}`,t(o)}let{token:n}=e.clientType==="oauth-app"?await Gt({...e,request:t}):await Gt({...e,request:t});return o.headers.authorization="token "+n,t(o)}function $({clientId:e,clientSecret:t,clientType:r="oauth-app",request:s=P.defaults({headers:{"user-agent":`octokit-auth-oauth-app.js/${as} ${I()}`}}),onTokenCreated:o,...n}){let i=Object.assign({clientType:r,clientId:e,clientSecret:t,onTokenCreated:o,strategyOptions:n,request:s});return Object.assign(Gt.bind(null,i),{hook:xn.bind(null,i)})}$.VERSION=as;async function In(e,t){if(t.type==="oauth-app")return{type:"oauth-app",clientId:e.clientId,clientSecret:e.clientSecret,clientType:e.clientType,headers:{authorization:`basic ${btoa(`${e.clientId}:${e.clientSecret}`)}`}};if("factory"in t){let{type:o,...n}={...t,...e};return t.factory(n)}let r={clientId:e.clientId,clientSecret:e.clientSecret,request:e.request,...t};return(e.clientType==="oauth-app"?await $({...r,clientType:e.clientType}):await $({...r,clientType:e.clientType}))()}async function qn(e,t,r,s){let o=t.endpoint.merge(r,s);if(/\/login\/(oauth\/access_token|device\/code)$/.test(o.url))return t(o);if(e.clientType==="github-app"&&!Ge(o.url))throw new Error(`[@octokit/auth-oauth-app] GitHub Apps cannot use their client ID/secret for basic authentication for endpoints other than "/applications/{client_id}/**". "${o.method} ${o.url}" is not supported.`);let n=btoa(`${e.clientId}:${e.clientSecret}`);o.headers.authorization=`basic ${n}`;try{return await t(o)}catch(i){throw i.status!==401||(i.message=`[@octokit/auth-oauth-app] "${o.method} ${o.url}" does not support clientId/clientSecret basic authentication.`),i}}var jn="0.0.0-development";function Me(e){let t=Object.assign({request:P.defaults({headers:{"user-agent":`octokit-auth-oauth-app.js/${jn} ${I()}`}}),clientType:"oauth-app"},e);return Object.assign(In.bind(null,t),{hook:qn.bind(null,t)})}function us(e){return e.includes("-----BEGIN RSA PRIVATE KEY-----")}function ls(e){return e.includes("-----BEGIN OPENSSH PRIVATE KEY-----")}function Pt(e){let t=new ArrayBuffer(e.length),r=new Uint8Array(t);for(let s=0,o=e.length;s<o;s++)r[s]=e.charCodeAt(s);return t}function ps(e){let t=e.trim().split(`
`).slice(1,-1).join(""),r=atob(t);return Pt(r)}function ds(e,t){return`${cs(e)}.${cs(t)}`}function hs(e){for(var t="",r=new Uint8Array(e),s=r.byteLength,o=0;o<s;o++)t+=String.fromCharCode(r[o]);return gs(btoa(t))}function gs(e){return e.replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_")}function cs(e){return gs(btoa(JSON.stringify(e)))}var{subtle:At}=globalThis.crypto;async function ms({privateKey:e,payload:t}){let r=e;if(us(r))throw new Error("[universal-github-app-jwt] Private Key is in PKCS#1 format, but only PKCS#8 is supported. See https://github.com/gr2m/universal-github-app-jwt#private-key-formats");if(ls(r))throw new Error("[universal-github-app-jwt] Private Key is in OpenSSH format, but only PKCS#8 is supported. See https://github.com/gr2m/universal-github-app-jwt#private-key-formats");let s={name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-256"}},o={alg:"RS256",typ:"JWT"},n=ps(r),i=await At.importKey("pkcs8",n,s,!1,["sign"]),c=ds(o,t),u=Pt(c),p=await At.sign(s.name,i,u),m=hs(p);return`${c}.${m}`}async function Rt({id:e,privateKey:t,now:r=Math.floor(Date.now()/1e3)}){let s=t.replace(/\\n/g,`
`),o=r-30,n=o+60*10,c=await ms({privateKey:s,payload:{iat:o,exp:n,iss:e}});return{appId:e,expiration:n,token:c}}var $e=class{constructor(t=1e3,r=0){if(isNaN(t)||t<0)throw new Error("Invalid max value");if(isNaN(r)||r<0)throw new Error("Invalid ttl value");this.first=null,this.items=Object.create(null),this.last=null,this.size=0,this.max=t,this.ttl=r}bumpLru(t){if(this.last===t)return;let r=this.last,s=t.next,o=t.prev;this.first===t&&(this.first=s),t.next=null,t.prev=r,r.next=t,o!==null&&(o.next=s),s!==null&&(s.prev=o),this.last=t}clear(){this.items=Object.create(null),this.first=null,this.last=null,this.size=0}delete(t){if(Object.prototype.hasOwnProperty.call(this.items,t)){let r=this.items[t];delete this.items[t],this.size--,r.prev!==null&&(r.prev.next=r.next),r.next!==null&&(r.next.prev=r.prev),this.first===r&&(this.first=r.next),this.last===r&&(this.last=r.prev)}}deleteMany(t){for(var r=0;r<t.length;r++)this.delete(t[r])}evict(){if(this.size>0){let t=this.first;delete this.items[t.key],--this.size===0?(this.first=null,this.last=null):(this.first=t.next,this.first.prev=null)}}expiresAt(t){if(Object.prototype.hasOwnProperty.call(this.items,t))return this.items[t].expiry}get(t){if(Object.prototype.hasOwnProperty.call(this.items,t)){let r=this.items[t];if(this.ttl>0&&r.expiry<=Date.now()){this.delete(t);return}return this.bumpLru(r),r.value}}getMany(t){let r=[];for(var s=0;s<t.length;s++)r.push(this.get(t[s]));return r}keys(){return Object.keys(this.items)}set(t,r){if(Object.prototype.hasOwnProperty.call(this.items,t)){let o=this.items[t];o.value=r,o.expiry=this.ttl>0?Date.now()+this.ttl:this.ttl,this.last!==o&&this.bumpLru(o);return}this.max>0&&this.size===this.max&&this.evict();let s={expiry:this.ttl>0?Date.now()+this.ttl:this.ttl,key:t,prev:this.last,next:null,value:r};this.items[t]=s,++this.size===1?this.first=s:this.last.next=s,this.last=s}};async function Le({appId:e,privateKey:t,timeDifference:r}){try{let s={id:e,privateKey:t};r&&Object.assign(s,{now:Math.floor(Date.now()/1e3)+r});let o=await Rt(s);return{type:"app",token:o.token,appId:o.appId,expiresAt:new Date(o.expiration*1e3).toISOString()}}catch(s){throw t==="-----BEGIN RSA PRIVATE KEY-----"?new Error("The 'privateKey` option contains only the first line '-----BEGIN RSA PRIVATE KEY-----'. If you are setting it using a `.env` file, make sure it is set on a single line with newlines replaced by '\n'"):s}}function Mn(){return new $e(15e3,1e3*60*59)}async function $n(e,t){let r=ws(t),s=await e.get(r);if(!s)return;let[o,n,i,c,u,p]=s.split("|"),m=t.permissions||u.split(/,/).reduce((w,k)=>(/!$/.test(k)?w[k.slice(0,-1)]="write":w[k]="read",w),{});return{token:o,createdAt:n,expiresAt:i,permissions:m,repositoryIds:t.repositoryIds,repositoryNames:t.repositoryNames,singleFileName:p,repositorySelection:c}}async function Ln(e,t,r){let s=ws(t),o=t.permissions?"":Object.keys(r.permissions).map(i=>`${i}${r.permissions[i]==="write"?"!":""}`).join(","),n=[r.token,r.createdAt,r.expiresAt,r.repositorySelection,o,r.singleFileName].join("|");await e.set(s,n)}function ws({installationId:e,permissions:t={},repositoryIds:r=[],repositoryNames:s=[]}){let o=Object.keys(t).sort().map(c=>t[c]==="read"?c:`${c}!`).join(","),n=r.sort().join(","),i=s.join(",");return[e,n,i,o].filter(Boolean).join("|")}function fs({installationId:e,token:t,createdAt:r,expiresAt:s,repositorySelection:o,permissions:n,repositoryIds:i,repositoryNames:c,singleFileName:u}){return Object.assign({type:"token",tokenType:"installation",token:t,installationId:e,permissions:n,createdAt:r,expiresAt:s,repositorySelection:o},i?{repositoryIds:i}:null,c?{repositoryNames:c}:null,u?{singleFileName:u}:null)}async function ys(e,t,r){let s=Number(t.installationId||e.installationId);if(!s)throw new Error("[@octokit/auth-app] installationId option is required for installation authentication.");if(t.factory){let{type:j,factory:W,oauthApp:U,...B}={...e,...t};return W(B)}let o=Object.assign({installationId:s},t);if(!t.refresh){let j=await $n(e.cache,o);if(j){let{token:W,createdAt:U,expiresAt:B,permissions:ee,repositoryIds:re,repositoryNames:le,singleFileName:x,repositorySelection:F}=j;return fs({installationId:s,token:W,createdAt:U,expiresAt:B,permissions:ee,repositorySelection:F,repositoryIds:re,repositoryNames:le,singleFileName:x})}}let n=await Le(e),i=r||e.request,c={installation_id:s,mediaType:{previews:["machine-man"]},headers:{authorization:`bearer ${n.token}`}};t.repositoryIds&&Object.assign(c,{repository_ids:t.repositoryIds}),t.repositoryNames&&Object.assign(c,{repositories:t.repositoryNames}),t.permissions&&Object.assign(c,{permissions:t.permissions});let{data:{token:u,expires_at:p,repositories:m,permissions:w,repository_selection:k,single_file:y}}=await i("POST /app/installations/{installation_id}/access_tokens",c),_=w||{},O=k||"all",v=m?m.map(j=>j.id):void 0,G=m?m.map(j=>j.name):void 0,C=new Date().toISOString(),Y={token:u,createdAt:C,expiresAt:p,repositorySelection:O,permissions:_,repositoryIds:v,repositoryNames:G};y&&Object.assign(c,{singleFileName:y}),await Ln(e.cache,o,Y);let N={installationId:s,token:u,createdAt:C,expiresAt:p,repositorySelection:O,permissions:_,repositoryIds:v,repositoryNames:G};return y&&Object.assign(N,{singleFileName:y}),fs(N)}async function Hn(e,t){switch(t.type){case"app":return Le(e);case"oauth-app":return e.oauthApp({type:"oauth-app"});case"installation":return ys(e,{...t,type:"installation"});case"oauth-user":return e.oauthApp(t);default:throw new Error(`Invalid auth type: ${t.type}`)}}var Nn=["/app","/app/hook/config","/app/hook/deliveries","/app/hook/deliveries/{delivery_id}","/app/hook/deliveries/{delivery_id}/attempts","/app/installations","/app/installations/{installation_id}","/app/installations/{installation_id}/access_tokens","/app/installations/{installation_id}/suspended","/app/installation-requests","/marketplace_listing/accounts/{account_id}","/marketplace_listing/plan","/marketplace_listing/plans","/marketplace_listing/plans/{plan_id}/accounts","/marketplace_listing/stubbed/accounts/{account_id}","/marketplace_listing/stubbed/plan","/marketplace_listing/stubbed/plans","/marketplace_listing/stubbed/plans/{plan_id}/accounts","/orgs/{org}/installation","/repos/{owner}/{repo}/installation","/users/{username}/installation"];function Wn(e){let r=`^(?:${e.map(s=>s.split("/").map(o=>o.startsWith("{")?"(?:.+?)":o).join("/")).map(s=>`(?:${s})`).join("|")})$`;return new RegExp(r,"i")}var Bn=Wn(Nn);function zn(e){return!!e&&Bn.test(e.split("?")[0])}var Vn=5*1e3;function Yn(e){return!(e.message.match(/'Expiration time' claim \('exp'\) must be a numeric value representing the future time at which the assertion expires/)||e.message.match(/'Issued at' claim \('iat'\) must be an Integer representing the time that the assertion was issued/))}async function Kn(e,t,r,s){let o=t.endpoint.merge(r,s),n=o.url;if(/\/login\/oauth\/access_token$/.test(n))return t(o);if(zn(n.replace(t.endpoint.DEFAULTS.baseUrl,""))){let{token:u}=await Le(e);o.headers.authorization=`bearer ${u}`;let p;try{p=await t(o)}catch(m){if(Yn(m)||typeof m.response.headers.date=="undefined")throw m;let w=Math.floor((Date.parse(m.response.headers.date)-Date.parse(new Date().toString()))/1e3);e.log.warn(m.message),e.log.warn(`[@octokit/auth-app] GitHub API time and system time are different by ${w} seconds. Retrying request with the difference accounted for.`);let{token:k}=await Le({...e,timeDifference:w});return o.headers.authorization=`bearer ${k}`,t(o)}return p}if(Ge(n)){let u=await e.oauthApp({type:"oauth-app"});return o.headers.authorization=u.headers.authorization,t(o)}let{token:i,createdAt:c}=await ys(e,{},t.defaults({baseUrl:o.baseUrl}));return o.headers.authorization=`token ${i}`,bs(e,t,o,c)}async function bs(e,t,r,s,o=0){let n=+new Date-+new Date(s);try{return await t(r)}catch(i){if(i.status!==401)throw i;if(n>=Vn)throw o>0&&(i.message=`After ${o} retries within ${n/1e3}s of creating the installation access token, the response remains 401. At this point, the cause may be an authentication problem or a system outage. Please check https://www.githubstatus.com for status information`),i;++o;let c=o*1e3;return e.log.warn(`[@octokit/auth-app] Retrying after 401 response to account for token replication delay (retry: ${o}, wait: ${c/1e3}s)`),await new Promise(u=>setTimeout(u,c)),bs(e,t,r,s,o)}}var Jn="7.1.5";function ge(e){if(!e.appId)throw new Error("[@octokit/auth-app] appId option is required");if(!e.privateKey)throw new Error("[@octokit/auth-app] privateKey option is required");if("installationId"in e&&!e.installationId)throw new Error("[@octokit/auth-app] installationId is set to a falsy value");let t=Object.assign({warn:console.warn.bind(console)},e.log),r=e.request||P.defaults({headers:{"user-agent":`octokit-auth-app.js/${Jn} ${I()}`}}),s=Object.assign({request:r,cache:Mn()},e,e.installationId?{installationId:Number(e.installationId)}:{},{log:t,oauthApp:Me({clientType:"github-app",clientId:e.clientId||"",clientSecret:e.clientSecret||"",request:r})});return Object.assign(Hn.bind(null,s),{hook:Kn.bind(null,s)})}async function Qn(e){return{type:"unauthenticated",reason:e}}function Xn(e){return e.status!==403||!e.response?!1:e.response.headers["x-ratelimit-remaining"]==="0"}var Zn=/\babuse\b/i;function ei(e){return e.status!==403?!1:Zn.test(e.message)}async function ti(e,t,r,s){let o=t.endpoint.merge(r,s);return t(o).catch(n=>{throw n.status===404?(n.message=`Not found. May be due to lack of authentication. Reason: ${e}`,n):Xn(n)?(n.message=`API rate limit exceeded. This maybe caused by the lack of authentication. Reason: ${e}`,n):ei(n)?(n.message=`You have triggered an abuse detection mechanism. This maybe caused by the lack of authentication. Reason: ${e}`,n):n.status===401?(n.message=`Unauthorized. "${o.method} ${o.url}" failed most likely due to lack of authentication. Reason: ${e}`,n):(n.status>=400&&n.status<500&&(n.message=n.message.replace(/\.?$/,`. May be caused by lack of authentication (${e}).`)),n)})}var ie=function(t){if(!t||!t.reason)throw new Error("[@octokit/auth-unauthenticated] No reason passed to createUnauthenticatedAuth");return Object.assign(Qn.bind(null,t.reason),{hook:ti.bind(null,t.reason)})};var Ts="7.1.6";function Es(e,t,r){if(Array.isArray(t)){for(let s of t)Es(e,s,r);return}e.eventHandlers[t]||(e.eventHandlers[t]=[]),e.eventHandlers[t].push(r)}var ri=J.defaults({userAgent:`octokit-oauth-app.js/${Ts} ${I()}`});async function Q(e,t){let{name:r,action:s}=t;if(e.eventHandlers[`${r}.${s}`])for(let o of e.eventHandlers[`${r}.${s}`])await o(t);if(e.eventHandlers[r])for(let o of e.eventHandlers[r])await o(t)}async function si(e,t){return e.octokit.auth({type:"oauth-user",...t,async factory(r){let s=new e.Octokit({authStrategy:$,auth:r}),o=await s.auth({type:"get"});return await Q(e,{name:"token",action:"created",token:o.token,scopes:o.scopes,authentication:o,octokit:s}),s}})}function oi(e,t){var s,o,n;let r={clientId:e.clientId,request:e.octokit.request,...t,allowSignup:(s=e.allowSignup)!=null?s:t.allowSignup,redirectUrl:(o=t.redirectUrl)!=null?o:e.redirectUrl,scopes:(n=t.scopes)!=null?n:e.defaultScopes};return Zr({clientType:e.clientType,...r})}async function ni(e,t){let r=await e.octokit.auth({type:"oauth-user",...t});return await Q(e,{name:"token",action:"created",token:r.token,scopes:r.scopes,authentication:r,octokit:new e.Octokit({authStrategy:$,auth:{clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:r.token,scopes:r.scopes,refreshToken:r.refreshToken,expiresAt:r.expiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt}})}),{authentication:r}}async function ii(e,t){let r=await je({clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request,...t});return Object.assign(r.authentication,{type:"token",tokenType:"oauth"}),r}async function ai(e,t){let r={clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request,...t};if(e.clientType==="oauth-app"){let n=await ke({clientType:"oauth-app",...r}),i=Object.assign(n.authentication,{type:"token",tokenType:"oauth"});return await Q(e,{name:"token",action:"reset",token:n.authentication.token,scopes:n.authentication.scopes||void 0,authentication:i,octokit:new e.Octokit({authStrategy:$,auth:{clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:n.authentication.token,scopes:n.authentication.scopes}})}),{...n,authentication:i}}let s=await ke({clientType:"github-app",...r}),o=Object.assign(s.authentication,{type:"token",tokenType:"oauth"});return await Q(e,{name:"token",action:"reset",token:s.authentication.token,authentication:o,octokit:new e.Octokit({authStrategy:$,auth:{clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:s.authentication.token}})}),{...s,authentication:o}}async function ci(e,t){if(e.clientType==="oauth-app")throw new Error("[@octokit/oauth-app] app.refreshToken() is not supported for OAuth Apps");let r=await Ue({clientType:"github-app",clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request,refreshToken:t.refreshToken}),s=Object.assign(r.authentication,{type:"token",tokenType:"oauth"});return await Q(e,{name:"token",action:"refreshed",token:r.authentication.token,authentication:s,octokit:new e.Octokit({authStrategy:$,auth:{clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:r.authentication.token}})}),{...r,authentication:s}}async function ui(e,t){if(e.clientType==="oauth-app")throw new Error("[@octokit/oauth-app] app.scopeToken() is not supported for OAuth Apps");let r=await rs({clientType:"github-app",clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request,...t}),s=Object.assign(r.authentication,{type:"token",tokenType:"oauth"});return await Q(e,{name:"token",action:"scoped",token:r.authentication.token,authentication:s,octokit:new e.Octokit({authStrategy:$,auth:{clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:r.authentication.token}})}),{...r,authentication:s}}async function li(e,t){let r={clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request,...t},s=e.clientType==="oauth-app"?await Oe({clientType:"oauth-app",...r}):await Oe({clientType:"github-app",...r});return await Q(e,{name:"token",action:"deleted",token:t.token,octokit:new e.Octokit({authStrategy:ie,auth:{reason:'Handling "token.deleted" event. The access for the token has been revoked.'}})}),s}async function pi(e,t){let r={clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request,...t},s=e.clientType==="oauth-app"?await Se({clientType:"oauth-app",...r}):await Se({clientType:"github-app",...r});return await Q(e,{name:"token",action:"deleted",token:t.token,octokit:new e.Octokit({authStrategy:ie,auth:{reason:'Handling "token.deleted" event. The access for the token has been revoked.'}})}),await Q(e,{name:"authorization",action:"deleted",token:t.token,octokit:new e.Octokit({authStrategy:ie,auth:{reason:'Handling "authorization.deleted" event. The access for the app has been revoked.'}})}),s}var Ct,He=(Ct=class{constructor(e){E(this,"type");E(this,"on");E(this,"octokit");E(this,"getUserOctokit");E(this,"getWebFlowAuthorizationUrl");E(this,"createToken");E(this,"checkToken");E(this,"resetToken");E(this,"refreshToken");E(this,"scopeToken");E(this,"deleteToken");E(this,"deleteAuthorization");let t=e.Octokit||ri;this.type=e.clientType||"oauth-app";let r=new t({authStrategy:Me,auth:{clientType:this.type,clientId:e.clientId,clientSecret:e.clientSecret}}),s={clientType:this.type,clientId:e.clientId,clientSecret:e.clientSecret,defaultScopes:e.defaultScopes||[],allowSignup:e.allowSignup,baseUrl:e.baseUrl,redirectUrl:e.redirectUrl,log:e.log,Octokit:t,octokit:r,eventHandlers:{}};this.on=Es.bind(null,s),this.octokit=r,this.getUserOctokit=si.bind(null,s),this.getWebFlowAuthorizationUrl=oi.bind(null,s),this.createToken=ni.bind(null,s),this.checkToken=ii.bind(null,s),this.resetToken=ai.bind(null,s),this.refreshToken=ci.bind(null,s),this.scopeToken=ui.bind(null,s),this.deleteToken=li.bind(null,s),this.deleteAuthorization=pi.bind(null,s)}static defaults(e){return class extends this{constructor(...r){super({...e,...r[0]})}}}},E(Ct,"VERSION",Ts),Ct);var Dt=new TextEncoder;function di(e){let r=e.match(/[\dA-F]{2}/gi).map(function(s){return parseInt(s,16)});return new Uint8Array(r)}function hi(e){return Array.prototype.map.call(new Uint8Array(e),t=>t.toString(16).padStart(2,"0")).join("")}async function _s(e){return crypto.subtle.importKey("raw",Dt.encode(e),{name:"HMAC",hash:{name:"SHA-256"}},!1,["sign","verify"])}async function vs(e,t){if(!e||!t)throw new TypeError("[@octokit/webhooks-methods] secret & payload required for sign()");if(typeof t!="string")throw new TypeError("[@octokit/webhooks-methods] payload must be a string");let r="sha256",s=await crypto.subtle.sign("HMAC",await _s(e),Dt.encode(t));return`${r}=${hi(s)}`}async function Ne(e,t,r){if(!e||!t||!r)throw new TypeError("[@octokit/webhooks-methods] secret, eventPayload & signature required");if(typeof t!="string")throw new TypeError("[@octokit/webhooks-methods] eventPayload must be a string");return await crypto.subtle.verify("HMAC",await _s(e),di(r.replace("sha256=","")),Dt.encode(t))}async function ks(e,t,r,s){if(await Ne(e,t,r))return!0;if(s!==void 0)for(let n of s){let i=await Ne(n,t,r);if(i)return i}return!1}var Ss=e=>({debug:()=>{},info:()=>{},warn:console.warn.bind(console),error:console.error.bind(console),...e}),gi=["branch_protection_configuration","branch_protection_configuration.disabled","branch_protection_configuration.enabled","branch_protection_rule","branch_protection_rule.created","branch_protection_rule.deleted","branch_protection_rule.edited","check_run","check_run.completed","check_run.created","check_run.requested_action","check_run.rerequested","check_suite","check_suite.completed","check_suite.requested","check_suite.rerequested","code_scanning_alert","code_scanning_alert.appeared_in_branch","code_scanning_alert.closed_by_user","code_scanning_alert.created","code_scanning_alert.fixed","code_scanning_alert.reopened","code_scanning_alert.reopened_by_user","commit_comment","commit_comment.created","create","custom_property","custom_property.created","custom_property.deleted","custom_property.updated","custom_property_values","custom_property_values.updated","delete","dependabot_alert","dependabot_alert.auto_dismissed","dependabot_alert.auto_reopened","dependabot_alert.created","dependabot_alert.dismissed","dependabot_alert.fixed","dependabot_alert.reintroduced","dependabot_alert.reopened","deploy_key","deploy_key.created","deploy_key.deleted","deployment","deployment.created","deployment_protection_rule","deployment_protection_rule.requested","deployment_review","deployment_review.approved","deployment_review.rejected","deployment_review.requested","deployment_status","deployment_status.created","discussion","discussion.answered","discussion.category_changed","discussion.closed","discussion.created","discussion.deleted","discussion.edited","discussion.labeled","discussion.locked","discussion.pinned","discussion.reopened","discussion.transferred","discussion.unanswered","discussion.unlabeled","discussion.unlocked","discussion.unpinned","discussion_comment","discussion_comment.created","discussion_comment.deleted","discussion_comment.edited","fork","github_app_authorization","github_app_authorization.revoked","gollum","installation","installation.created","installation.deleted","installation.new_permissions_accepted","installation.suspend","installation.unsuspend","installation_repositories","installation_repositories.added","installation_repositories.removed","installation_target","installation_target.renamed","issue_comment","issue_comment.created","issue_comment.deleted","issue_comment.edited","issues","issues.assigned","issues.closed","issues.deleted","issues.demilestoned","issues.edited","issues.labeled","issues.locked","issues.milestoned","issues.opened","issues.pinned","issues.reopened","issues.transferred","issues.unassigned","issues.unlabeled","issues.unlocked","issues.unpinned","label","label.created","label.deleted","label.edited","marketplace_purchase","marketplace_purchase.cancelled","marketplace_purchase.changed","marketplace_purchase.pending_change","marketplace_purchase.pending_change_cancelled","marketplace_purchase.purchased","member","member.added","member.edited","member.removed","membership","membership.added","membership.removed","merge_group","merge_group.checks_requested","merge_group.destroyed","meta","meta.deleted","milestone","milestone.closed","milestone.created","milestone.deleted","milestone.edited","milestone.opened","org_block","org_block.blocked","org_block.unblocked","organization","organization.deleted","organization.member_added","organization.member_invited","organization.member_removed","organization.renamed","package","package.published","package.updated","page_build","personal_access_token_request","personal_access_token_request.approved","personal_access_token_request.cancelled","personal_access_token_request.created","personal_access_token_request.denied","ping","project","project.closed","project.created","project.deleted","project.edited","project.reopened","project_card","project_card.converted","project_card.created","project_card.deleted","project_card.edited","project_card.moved","project_column","project_column.created","project_column.deleted","project_column.edited","project_column.moved","projects_v2","projects_v2.closed","projects_v2.created","projects_v2.deleted","projects_v2.edited","projects_v2.reopened","projects_v2_item","projects_v2_item.archived","projects_v2_item.converted","projects_v2_item.created","projects_v2_item.deleted","projects_v2_item.edited","projects_v2_item.reordered","projects_v2_item.restored","projects_v2_status_update","projects_v2_status_update.created","projects_v2_status_update.deleted","projects_v2_status_update.edited","public","pull_request","pull_request.assigned","pull_request.auto_merge_disabled","pull_request.auto_merge_enabled","pull_request.closed","pull_request.converted_to_draft","pull_request.demilestoned","pull_request.dequeued","pull_request.edited","pull_request.enqueued","pull_request.labeled","pull_request.locked","pull_request.milestoned","pull_request.opened","pull_request.ready_for_review","pull_request.reopened","pull_request.review_request_removed","pull_request.review_requested","pull_request.synchronize","pull_request.unassigned","pull_request.unlabeled","pull_request.unlocked","pull_request_review","pull_request_review.dismissed","pull_request_review.edited","pull_request_review.submitted","pull_request_review_comment","pull_request_review_comment.created","pull_request_review_comment.deleted","pull_request_review_comment.edited","pull_request_review_thread","pull_request_review_thread.resolved","pull_request_review_thread.unresolved","push","registry_package","registry_package.published","registry_package.updated","release","release.created","release.deleted","release.edited","release.prereleased","release.published","release.released","release.unpublished","repository","repository.archived","repository.created","repository.deleted","repository.edited","repository.privatized","repository.publicized","repository.renamed","repository.transferred","repository.unarchived","repository_advisory","repository_advisory.published","repository_advisory.reported","repository_dispatch","repository_dispatch.sample.collected","repository_import","repository_ruleset","repository_ruleset.created","repository_ruleset.deleted","repository_ruleset.edited","repository_vulnerability_alert","repository_vulnerability_alert.create","repository_vulnerability_alert.dismiss","repository_vulnerability_alert.reopen","repository_vulnerability_alert.resolve","secret_scanning_alert","secret_scanning_alert.created","secret_scanning_alert.publicly_leaked","secret_scanning_alert.reopened","secret_scanning_alert.resolved","secret_scanning_alert.validated","secret_scanning_alert_location","secret_scanning_alert_location.created","secret_scanning_scan","secret_scanning_scan.completed","security_advisory","security_advisory.published","security_advisory.updated","security_advisory.withdrawn","security_and_analysis","sponsorship","sponsorship.cancelled","sponsorship.created","sponsorship.edited","sponsorship.pending_cancellation","sponsorship.pending_tier_change","sponsorship.tier_changed","star","star.created","star.deleted","status","sub_issues","sub_issues.parent_issue_added","sub_issues.parent_issue_removed","sub_issues.sub_issue_added","sub_issues.sub_issue_removed","team","team.added_to_repository","team.created","team.deleted","team.edited","team.removed_from_repository","team_add","watch","watch.started","workflow_dispatch","workflow_job","workflow_job.completed","workflow_job.in_progress","workflow_job.queued","workflow_job.waiting","workflow_run","workflow_run.completed","workflow_run.in_progress","workflow_run.requested"];function Ft(e,t,r){e.hooks[t]||(e.hooks[t]=[]),e.hooks[t].push(r)}function Gs(e,t,r){if(Array.isArray(t)){t.forEach(s=>Gs(e,s,r));return}if(["*","error"].includes(t)){let s=t==="*"?"any":t,o=`Using the "${t}" event with the regular Webhooks.on() function is not supported. Please use the Webhooks.on${s.charAt(0).toUpperCase()+s.slice(1)}() method instead`;throw new Error(o)}gi.includes(t)||e.log.warn(`"${t}" is not a known webhook name (https://developer.github.com/v3/activity/events/types/)`),Ft(e,t,r)}function mi(e,t){Ft(e,"*",t)}function fi(e,t){Ft(e,"error",t)}function Os(e,t){let r;try{r=e(t)}catch(s){console.log('FATAL: Error occurred in "error" event handler'),console.log(s)}r&&r.catch&&r.catch(s=>{console.log('FATAL: Error occurred in "error" event handler'),console.log(s)})}function wi(e,t,r){let s=[e.hooks[r],e.hooks["*"]];return t&&s.unshift(e.hooks[`${r}.${t}`]),[].concat(...s.filter(Boolean))}function yi(e,t){let r=e.hooks.error||[];if(t instanceof Error){let i=Object.assign(new AggregateError([t],t.message),{event:t});return r.forEach(c=>Os(c,i)),Promise.reject(i)}if(!t||!t.name){let i=new Error("Event name not passed");throw new AggregateError([i],i.message)}if(!t.payload){let i=new Error("Event name not passed");throw new AggregateError([i],i.message)}let s=wi(e,"action"in t.payload?t.payload.action:null,t.name);if(s.length===0)return Promise.resolve();let o=[],n=s.map(i=>{let c=Promise.resolve(t);return e.transform&&(c=c.then(e.transform)),c.then(u=>i(u)).catch(u=>o.push(Object.assign(u,{event:t})))});return Promise.all(n).then(()=>{if(o.length===0)return;let i=new AggregateError(o,o.map(c=>c.message).join(`
`));throw Object.assign(i,{event:t}),r.forEach(c=>Os(c,i)),i})}function Ps(e,t,r){if(Array.isArray(t)){t.forEach(s=>Ps(e,s,r));return}if(e.hooks[t]){for(let s=e.hooks[t].length-1;s>=0;s--)if(e.hooks[t][s]===r){e.hooks[t].splice(s,1);return}}}function bi(e){let t={hooks:{},log:Ss(e&&e.log)};return e&&e.transform&&(t.transform=e.transform),{on:Gs.bind(null,t),onAny:mi.bind(null,t),onError:fi.bind(null,t),removeListener:Ps.bind(null,t),receive:yi.bind(null,t)}}async function Ti(e,t){if(!await ks(e.secret,t.payload,t.signature,e.additionalSecrets).catch(()=>!1)){let o=new Error("[@octokit/webhooks] signature does not match event payload and secret");return e.eventHandler.receive(Object.assign(o,{event:t,status:400}))}let s;try{s=JSON.parse(t.payload)}catch(o){throw o.message="Invalid JSON",o.status=400,new AggregateError([o],o.message)}return e.eventHandler.receive({id:t.id,name:t.name,payload:s})}var As=class{constructor(e){E(this,"sign");E(this,"verify");E(this,"on");E(this,"onAny");E(this,"onError");E(this,"removeListener");E(this,"receive");E(this,"verifyAndReceive");if(!e||!e.secret)throw new Error("[@octokit/webhooks] options.secret required");let t={eventHandler:bi(e),secret:e.secret,additionalSecrets:e.additionalSecrets,hooks:{},log:Ss(e.log)};this.sign=vs.bind(null,e.secret),this.verify=Ne.bind(null,e.secret),this.on=t.eventHandler.on,this.onAny=t.eventHandler.onAny,this.onError=t.eventHandler.onError,this.removeListener=t.eventHandler.removeListener,this.receive=t.eventHandler.receive,this.verifyAndReceive=Ti.bind(null,t)}};var Ei="15.1.5";function _i(e,t){return new As({secret:t.secret,transform:async r=>{if(!("installation"in r.payload)||typeof r.payload.installation!="object"){let n=new e.constructor({authStrategy:ie,auth:{reason:'"installation" key missing in webhook event payload'}});return{...r,octokit:n}}let s=r.payload.installation.id,o=await e.auth({type:"installation",installationId:s,factory(n){return new n.octokit.constructor({...n.octokitOptions,authStrategy:ge,auth:{...n,installationId:s}})}});return o.hook.before("request",n=>{n.headers["x-github-delivery"]=r.id}),{...r,octokit:o}}})}async function Rs(e,t){return e.octokit.auth({type:"installation",installationId:t,factory(r){let s={...r.octokitOptions,authStrategy:ge,auth:{...r,installationId:t}};return new r.octokit.constructor(s)}})}function vi(e){return Object.assign(ki.bind(null,e),{iterator:Cs.bind(null,e)})}async function ki(e,t){let r=Cs(e)[Symbol.asyncIterator](),s=await r.next();for(;!s.done;)await t(s.value),s=await r.next()}function Cs(e){return{async*[Symbol.asyncIterator](){let t=xe.iterator(e.octokit,"GET /app/installations");for await(let{data:r}of t)for(let s of r)yield{octokit:await Rs(e,s.id),installation:s}}}}function Oi(e){return Object.assign(Si.bind(null,e),{iterator:Ds.bind(null,e)})}async function Si(e,t,r){let s=Ds(e,r?t:void 0)[Symbol.asyncIterator](),o=await s.next();for(;!o.done;)r?await r(o.value):await t(o.value),o=await s.next()}function Gi(e,t){return{async*[Symbol.asyncIterator](){yield{octokit:await e.getInstallationOctokit(t)}}}}function Ds(e,t){return{async*[Symbol.asyncIterator](){let r=t?Gi(e,t.installationId):e.eachInstallation.iterator();for await(let{octokit:s}of r){let o=xe.iterator(s,"GET /installation/repositories");for await(let{data:n}of o)for(let i of n)yield{octokit:s,repository:i}}}}}function Pi(e){let t;return async function(s={}){t||(t=Ai(e));let o=await t,n=new URL(o);return s.target_id!==void 0&&(n.pathname+="/permissions",n.searchParams.append("target_id",s.target_id.toFixed())),s.state!==void 0&&n.searchParams.append("state",s.state),n.href}}async function Ai(e){let{data:t}=await e.octokit.request("GET /app");if(!t)throw new Error("[@octokit/app] unable to fetch metadata for app");return`${t.html_url}/installations/new`}var xt,Fs=(xt=class{constructor(e){E(this,"octokit");E(this,"webhooks");E(this,"oauth");E(this,"getInstallationOctokit");E(this,"eachInstallation");E(this,"eachRepository");E(this,"getInstallationUrl");E(this,"log");let t=e.Octokit||J,r=Object.assign({appId:e.appId,privateKey:e.privateKey},e.oauth?{clientId:e.oauth.clientId,clientSecret:e.oauth.clientSecret}:{}),s={authStrategy:ge,auth:r};"log"in e&&typeof e.log!="undefined"&&(s.log=e.log),this.octokit=new t(s),this.log=Object.assign({debug:()=>{},info:()=>{},warn:console.warn.bind(console),error:console.error.bind(console)},e.log),e.webhooks?this.webhooks=_i(this.octokit,e.webhooks):Object.defineProperty(this,"webhooks",{get(){throw new Error("[@octokit/app] webhooks option not set")}}),e.oauth?this.oauth=new He({...e.oauth,clientType:"github-app",Octokit:t}):Object.defineProperty(this,"oauth",{get(){throw new Error("[@octokit/app] oauth.clientId / oauth.clientSecret options are not set")}}),this.getInstallationOctokit=Rs.bind(null,this),this.eachInstallation=vi(this),this.eachRepository=Oi(this),this.getInstallationUrl=Pi(this)}static defaults(e){return class extends this{constructor(...r){super({...e,...r[0]})}}}},E(xt,"VERSION",Ei),xt);var Ri="0.0.0-development",We=J.plugin(bt,mt,Lr,vt,Ie).defaults({userAgent:`octokit.js/${Ri}`,throttle:{onRateLimit:Ci,onSecondaryRateLimit:Di}});function Ci(e,t,r){if(r.log.warn(`Request quota exhausted for request ${t.method} ${t.url}`),t.request.retryCount===0)return r.log.info(`Retrying after ${e} seconds!`),!0}function Di(e,t,r){if(r.log.warn(`SecondaryRateLimit detected for request ${t.method} ${t.url}`),t.request.retryCount===0)return r.log.info(`Retrying after ${e} seconds!`),!0}var nl=Fs.defaults({Octokit:We}),il=He.defaults({Octokit:We});var Be=class{constructor(t,r){this.settings=t;this.noticeManager=r;this.octokit=null;this.initializeClient()}initializeClient(t){let r=t||this.settings.githubToken;if(!r){this.noticeManager.error("GitHub token is not set. Please set it in settings.");return}this.octokit=new We({auth:r})}isReady(){return this.octokit!==null}getClient(){return this.octokit}async fetchRepositoryIssues(t,r){if(!this.octokit)return[];try{let s=[],o=1,n=!0;for(;n;){let i=await this.octokit.rest.issues.listForRepo({owner:t,repo:r,state:"open",per_page:100,page:o});s=[...s,...i.data],n=i.data.length===100,o++}return this.noticeManager.debug(`Fetched ${s.length} issues for ${t}/${r}`),s}catch(s){return this.noticeManager.error(`Error fetching issues for ${t}/${r}`,s),[]}}async fetchRepositoryPullRequests(t,r){if(!this.octokit)return[];try{let s=[],o=1,n=!0;for(;n;){let i=await this.octokit.rest.pulls.list({owner:t,repo:r,state:"open",per_page:100,page:o});s=[...s,...i.data],n=i.data.length===100,o++}return this.noticeManager.debug(`Fetched ${s.length} pull requests for ${t}/${r}`),s}catch(s){return this.noticeManager.error(`Error fetching pull requests for ${t}/${r}`,s),[]}}isPullRequestByUser(t,r){return!t||!t.user?!1:t.user.login===r}async fetchAvailableRepositories(){if(!this.octokit)return[];try{this.noticeManager.debug("Fetching repositories from GitHub");let t=[],r=1,s=!0;for(;s;){let{data:p}=await this.octokit.rest.repos.listForAuthenticatedUser({per_page:100,sort:"updated",page:r});t=[...t,...p],s=p.length===100,r++}let o=[],n=1,i=!0;for(;i;){let{data:p}=await this.octokit.rest.orgs.listForAuthenticatedUser({per_page:100,page:n});o=[...o,...p],i=p.length===100,n++}let c=await Promise.all(o.map(async p=>{if(this.noticeManager.debug(`Fetching repositories for organization: ${p.login}`),!this.octokit)return this.noticeManager.error("GitHub client is not initialized"),[];let m=[],w=1,k=!0;for(;k;){let{data:y}=await this.octokit.rest.repos.listForOrg({org:p.login,per_page:100,page:w});m=[...m,...y],k=y.length===100,w++}return m})),u=[...t,...c.flat()];return this.noticeManager.debug(`Found ${u.length} repositories in total`),u}catch(t){return this.noticeManager.error("Error fetching repositories",t),[]}}async fetchIssueComments(t,r,s){if(!this.octokit)return[];try{let o=[],n=1,i=!0;for(;i;){let c=await this.octokit.rest.issues.listComments({owner:t,repo:r,issue_number:s,per_page:100,page:n});o=[...o,...c.data],i=c.data.length===100,n++}return this.noticeManager.debug(`Fetched ${o.length} comments for issue #${s}`),o}catch(o){return this.noticeManager.error(`Error fetching comments for issue #${s}`,o),[]}}async fetchPullRequestComments(t,r,s){if(!this.octokit)return[];try{let o=await this.fetchIssueComments(t,r,s),n=[],i=1,c=!0;for(;c;){let u=await this.octokit.rest.pulls.listReviewComments({owner:t,repo:r,pull_number:s,per_page:100,page:i});n=[...n,...u.data],c=u.data.length===100,i++}return this.noticeManager.debug(`Fetched ${o.length} general comments and ${n.length} review comments for PR #${s}`),n.forEach(u=>{u.is_review_comment=!0}),[...o,...n]}catch(o){return this.noticeManager.error(`Error fetching comments for PR #${s}`,o),[]}}dispose(){this.octokit=null}};var z=require("obsidian");var Fi=Math.pow(10,8)*24*60*60*1e3,ll=-Fi,ze=6048e5,xs=864e5;var xi=3600;var Is=xi*24,pl=Is*7,Ii=Is*365.2425,qi=Ii/12,dl=qi*3,It=Symbol.for("constructDateFrom");function H(e,t){return typeof e=="function"?e(t):e&&typeof e=="object"&&It in e?e[It](t):e instanceof Date?new e.constructor(t):new Date(t)}function D(e,t){return H(t||e,e)}var ji={};function te(){return ji}function X(e,t){var c,u,p,m,w,k,y,_;let r=te(),s=(_=(y=(m=(p=t==null?void 0:t.weekStartsOn)!=null?p:(u=(c=t==null?void 0:t.locale)==null?void 0:c.options)==null?void 0:u.weekStartsOn)!=null?m:r.weekStartsOn)!=null?y:(k=(w=r.locale)==null?void 0:w.options)==null?void 0:k.weekStartsOn)!=null?_:0,o=D(e,t==null?void 0:t.in),n=o.getDay(),i=(n<s?7:0)+n-s;return o.setDate(o.getDate()-i),o.setHours(0,0,0,0),o}function ae(e,t){return X(e,{...t,weekStartsOn:1})}function Ve(e,t){let r=D(e,t==null?void 0:t.in),s=r.getFullYear(),o=H(r,0);o.setFullYear(s+1,0,4),o.setHours(0,0,0,0);let n=ae(o),i=H(r,0);i.setFullYear(s,0,4),i.setHours(0,0,0,0);let c=ae(i);return r.getTime()>=n.getTime()?s+1:r.getTime()>=c.getTime()?s:s-1}function qt(e){let t=D(e),r=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return r.setUTCFullYear(t.getFullYear()),+e-+r}function qs(e,...t){let r=H.bind(null,e||t.find(s=>typeof s=="object"));return t.map(r)}function jt(e,t){let r=D(e,t==null?void 0:t.in);return r.setHours(0,0,0,0),r}function js(e,t,r){let[s,o]=qs(r==null?void 0:r.in,e,t),n=jt(s),i=jt(o),c=+n-qt(n),u=+i-qt(i);return Math.round((c-u)/xs)}function Us(e,t){let r=Ve(e,t),s=H((t==null?void 0:t.in)||e,0);return s.setFullYear(r,0,4),s.setHours(0,0,0,0),ae(s)}function Ms(e){return e instanceof Date||typeof e=="object"&&Object.prototype.toString.call(e)==="[object Date]"}function $s(e){return!(!Ms(e)&&typeof e!="number"||isNaN(+D(e)))}function Ls(e,t){let r=D(e,t==null?void 0:t.in);return r.setFullYear(r.getFullYear(),0,1),r.setHours(0,0,0,0),r}var Ui={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}},Hs=(e,t,r)=>{let s,o=Ui[e];return typeof o=="string"?s=o:t===1?s=o.one:s=o.other.replace("{{count}}",t.toString()),r!=null&&r.addSuffix?r.comparison&&r.comparison>0?"in "+s:s+" ago":s};function Ye(e){return(t={})=>{let r=t.width?String(t.width):e.defaultWidth;return e.formats[r]||e.formats[e.defaultWidth]}}var Mi={full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},$i={full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},Li={full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},Ns={date:Ye({formats:Mi,defaultWidth:"full"}),time:Ye({formats:$i,defaultWidth:"full"}),dateTime:Ye({formats:Li,defaultWidth:"full"})};var Hi={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"},Ws=(e,t,r,s)=>Hi[e];function me(e){return(t,r)=>{let s=r!=null&&r.context?String(r.context):"standalone",o;if(s==="formatting"&&e.formattingValues){let i=e.defaultFormattingWidth||e.defaultWidth,c=r!=null&&r.width?String(r.width):i;o=e.formattingValues[c]||e.formattingValues[i]}else{let i=e.defaultWidth,c=r!=null&&r.width?String(r.width):e.defaultWidth;o=e.values[c]||e.values[i]}let n=e.argumentCallback?e.argumentCallback(t):t;return o[n]}}var Ni={narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},Wi={narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},Bi={narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},zi={narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},Vi={narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},Yi={narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},Ki=(e,t)=>{let r=Number(e),s=r%100;if(s>20||s<10)switch(s%10){case 1:return r+"st";case 2:return r+"nd";case 3:return r+"rd"}return r+"th"},Bs={ordinalNumber:Ki,era:me({values:Ni,defaultWidth:"wide"}),quarter:me({values:Wi,defaultWidth:"wide",argumentCallback:e=>e-1}),month:me({values:Bi,defaultWidth:"wide"}),day:me({values:zi,defaultWidth:"wide"}),dayPeriod:me({values:Vi,defaultWidth:"wide",formattingValues:Yi,defaultFormattingWidth:"wide"})};function fe(e){return(t,r={})=>{let s=r.width,o=s&&e.matchPatterns[s]||e.matchPatterns[e.defaultMatchWidth],n=t.match(o);if(!n)return null;let i=n[0],c=s&&e.parsePatterns[s]||e.parsePatterns[e.defaultParseWidth],u=Array.isArray(c)?Qi(c,w=>w.test(i)):Ji(c,w=>w.test(i)),p;p=e.valueCallback?e.valueCallback(u):u,p=r.valueCallback?r.valueCallback(p):p;let m=t.slice(i.length);return{value:p,rest:m}}}function Ji(e,t){for(let r in e)if(Object.prototype.hasOwnProperty.call(e,r)&&t(e[r]))return r}function Qi(e,t){for(let r=0;r<e.length;r++)if(t(e[r]))return r}function zs(e){return(t,r={})=>{let s=t.match(e.matchPattern);if(!s)return null;let o=s[0],n=t.match(e.parsePattern);if(!n)return null;let i=e.valueCallback?e.valueCallback(n[0]):n[0];i=r.valueCallback?r.valueCallback(i):i;let c=t.slice(o.length);return{value:i,rest:c}}}var Xi=/^(\d+)(th|st|nd|rd)?/i,Zi=/\d+/i,ea={narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},ta={any:[/^b/i,/^(a|c)/i]},ra={narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},sa={any:[/1/i,/2/i,/3/i,/4/i]},oa={narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},na={narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},ia={narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},aa={narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},ca={narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},ua={any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},Vs={ordinalNumber:zs({matchPattern:Xi,parsePattern:Zi,valueCallback:e=>parseInt(e,10)}),era:fe({matchPatterns:ea,defaultMatchWidth:"wide",parsePatterns:ta,defaultParseWidth:"any"}),quarter:fe({matchPatterns:ra,defaultMatchWidth:"wide",parsePatterns:sa,defaultParseWidth:"any",valueCallback:e=>e+1}),month:fe({matchPatterns:oa,defaultMatchWidth:"wide",parsePatterns:na,defaultParseWidth:"any"}),day:fe({matchPatterns:ia,defaultMatchWidth:"wide",parsePatterns:aa,defaultParseWidth:"any"}),dayPeriod:fe({matchPatterns:ca,defaultMatchWidth:"any",parsePatterns:ua,defaultParseWidth:"any"})};var Ut={code:"en-US",formatDistance:Hs,formatLong:Ns,formatRelative:Ws,localize:Bs,match:Vs,options:{weekStartsOn:0,firstWeekContainsDate:1}};function Ys(e,t){let r=D(e,t==null?void 0:t.in);return js(r,Ls(r))+1}function Ks(e,t){let r=D(e,t==null?void 0:t.in),s=+ae(r)-+Us(r);return Math.round(s/ze)+1}function Ke(e,t){var m,w,k,y,_,O,v,G;let r=D(e,t==null?void 0:t.in),s=r.getFullYear(),o=te(),n=(G=(v=(y=(k=t==null?void 0:t.firstWeekContainsDate)!=null?k:(w=(m=t==null?void 0:t.locale)==null?void 0:m.options)==null?void 0:w.firstWeekContainsDate)!=null?y:o.firstWeekContainsDate)!=null?v:(O=(_=o.locale)==null?void 0:_.options)==null?void 0:O.firstWeekContainsDate)!=null?G:1,i=H((t==null?void 0:t.in)||e,0);i.setFullYear(s+1,0,n),i.setHours(0,0,0,0);let c=X(i,t),u=H((t==null?void 0:t.in)||e,0);u.setFullYear(s,0,n),u.setHours(0,0,0,0);let p=X(u,t);return+r>=+c?s+1:+r>=+p?s:s-1}function Js(e,t){var c,u,p,m,w,k,y,_;let r=te(),s=(_=(y=(m=(p=t==null?void 0:t.firstWeekContainsDate)!=null?p:(u=(c=t==null?void 0:t.locale)==null?void 0:c.options)==null?void 0:u.firstWeekContainsDate)!=null?m:r.firstWeekContainsDate)!=null?y:(k=(w=r.locale)==null?void 0:w.options)==null?void 0:k.firstWeekContainsDate)!=null?_:1,o=Ke(e,t),n=H((t==null?void 0:t.in)||e,0);return n.setFullYear(o,0,s),n.setHours(0,0,0,0),X(n,t)}function Qs(e,t){let r=D(e,t==null?void 0:t.in),s=+X(r,t)-+Js(r,t);return Math.round(s/ze)+1}function A(e,t){let r=e<0?"-":"",s=Math.abs(e).toString().padStart(t,"0");return r+s}var Z={y(e,t){let r=e.getFullYear(),s=r>0?r:1-r;return A(t==="yy"?s%100:s,t.length)},M(e,t){let r=e.getMonth();return t==="M"?String(r+1):A(r+1,2)},d(e,t){return A(e.getDate(),t.length)},a(e,t){let r=e.getHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return r.toUpperCase();case"aaa":return r;case"aaaaa":return r[0];case"aaaa":default:return r==="am"?"a.m.":"p.m."}},h(e,t){return A(e.getHours()%12||12,t.length)},H(e,t){return A(e.getHours(),t.length)},m(e,t){return A(e.getMinutes(),t.length)},s(e,t){return A(e.getSeconds(),t.length)},S(e,t){let r=t.length,s=e.getMilliseconds(),o=Math.trunc(s*Math.pow(10,r-3));return A(o,t.length)}};var we={am:"am",pm:"pm",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},Mt={G:function(e,t,r){let s=e.getFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return r.era(s,{width:"abbreviated"});case"GGGGG":return r.era(s,{width:"narrow"});case"GGGG":default:return r.era(s,{width:"wide"})}},y:function(e,t,r){if(t==="yo"){let s=e.getFullYear(),o=s>0?s:1-s;return r.ordinalNumber(o,{unit:"year"})}return Z.y(e,t)},Y:function(e,t,r,s){let o=Ke(e,s),n=o>0?o:1-o;if(t==="YY"){let i=n%100;return A(i,2)}return t==="Yo"?r.ordinalNumber(n,{unit:"year"}):A(n,t.length)},R:function(e,t){let r=Ve(e);return A(r,t.length)},u:function(e,t){let r=e.getFullYear();return A(r,t.length)},Q:function(e,t,r){let s=Math.ceil((e.getMonth()+1)/3);switch(t){case"Q":return String(s);case"QQ":return A(s,2);case"Qo":return r.ordinalNumber(s,{unit:"quarter"});case"QQQ":return r.quarter(s,{width:"abbreviated",context:"formatting"});case"QQQQQ":return r.quarter(s,{width:"narrow",context:"formatting"});case"QQQQ":default:return r.quarter(s,{width:"wide",context:"formatting"})}},q:function(e,t,r){let s=Math.ceil((e.getMonth()+1)/3);switch(t){case"q":return String(s);case"qq":return A(s,2);case"qo":return r.ordinalNumber(s,{unit:"quarter"});case"qqq":return r.quarter(s,{width:"abbreviated",context:"standalone"});case"qqqqq":return r.quarter(s,{width:"narrow",context:"standalone"});case"qqqq":default:return r.quarter(s,{width:"wide",context:"standalone"})}},M:function(e,t,r){let s=e.getMonth();switch(t){case"M":case"MM":return Z.M(e,t);case"Mo":return r.ordinalNumber(s+1,{unit:"month"});case"MMM":return r.month(s,{width:"abbreviated",context:"formatting"});case"MMMMM":return r.month(s,{width:"narrow",context:"formatting"});case"MMMM":default:return r.month(s,{width:"wide",context:"formatting"})}},L:function(e,t,r){let s=e.getMonth();switch(t){case"L":return String(s+1);case"LL":return A(s+1,2);case"Lo":return r.ordinalNumber(s+1,{unit:"month"});case"LLL":return r.month(s,{width:"abbreviated",context:"standalone"});case"LLLLL":return r.month(s,{width:"narrow",context:"standalone"});case"LLLL":default:return r.month(s,{width:"wide",context:"standalone"})}},w:function(e,t,r,s){let o=Qs(e,s);return t==="wo"?r.ordinalNumber(o,{unit:"week"}):A(o,t.length)},I:function(e,t,r){let s=Ks(e);return t==="Io"?r.ordinalNumber(s,{unit:"week"}):A(s,t.length)},d:function(e,t,r){return t==="do"?r.ordinalNumber(e.getDate(),{unit:"date"}):Z.d(e,t)},D:function(e,t,r){let s=Ys(e);return t==="Do"?r.ordinalNumber(s,{unit:"dayOfYear"}):A(s,t.length)},E:function(e,t,r){let s=e.getDay();switch(t){case"E":case"EE":case"EEE":return r.day(s,{width:"abbreviated",context:"formatting"});case"EEEEE":return r.day(s,{width:"narrow",context:"formatting"});case"EEEEEE":return r.day(s,{width:"short",context:"formatting"});case"EEEE":default:return r.day(s,{width:"wide",context:"formatting"})}},e:function(e,t,r,s){let o=e.getDay(),n=(o-s.weekStartsOn+8)%7||7;switch(t){case"e":return String(n);case"ee":return A(n,2);case"eo":return r.ordinalNumber(n,{unit:"day"});case"eee":return r.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return r.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return r.day(o,{width:"short",context:"formatting"});case"eeee":default:return r.day(o,{width:"wide",context:"formatting"})}},c:function(e,t,r,s){let o=e.getDay(),n=(o-s.weekStartsOn+8)%7||7;switch(t){case"c":return String(n);case"cc":return A(n,t.length);case"co":return r.ordinalNumber(n,{unit:"day"});case"ccc":return r.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return r.day(o,{width:"narrow",context:"standalone"});case"cccccc":return r.day(o,{width:"short",context:"standalone"});case"cccc":default:return r.day(o,{width:"wide",context:"standalone"})}},i:function(e,t,r){let s=e.getDay(),o=s===0?7:s;switch(t){case"i":return String(o);case"ii":return A(o,t.length);case"io":return r.ordinalNumber(o,{unit:"day"});case"iii":return r.day(s,{width:"abbreviated",context:"formatting"});case"iiiii":return r.day(s,{width:"narrow",context:"formatting"});case"iiiiii":return r.day(s,{width:"short",context:"formatting"});case"iiii":default:return r.day(s,{width:"wide",context:"formatting"})}},a:function(e,t,r){let o=e.getHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return r.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return r.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return r.dayPeriod(o,{width:"narrow",context:"formatting"});case"aaaa":default:return r.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(e,t,r){let s=e.getHours(),o;switch(s===12?o=we.noon:s===0?o=we.midnight:o=s/12>=1?"pm":"am",t){case"b":case"bb":return r.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return r.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return r.dayPeriod(o,{width:"narrow",context:"formatting"});case"bbbb":default:return r.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(e,t,r){let s=e.getHours(),o;switch(s>=17?o=we.evening:s>=12?o=we.afternoon:s>=4?o=we.morning:o=we.night,t){case"B":case"BB":case"BBB":return r.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return r.dayPeriod(o,{width:"narrow",context:"formatting"});case"BBBB":default:return r.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(e,t,r){if(t==="ho"){let s=e.getHours()%12;return s===0&&(s=12),r.ordinalNumber(s,{unit:"hour"})}return Z.h(e,t)},H:function(e,t,r){return t==="Ho"?r.ordinalNumber(e.getHours(),{unit:"hour"}):Z.H(e,t)},K:function(e,t,r){let s=e.getHours()%12;return t==="Ko"?r.ordinalNumber(s,{unit:"hour"}):A(s,t.length)},k:function(e,t,r){let s=e.getHours();return s===0&&(s=24),t==="ko"?r.ordinalNumber(s,{unit:"hour"}):A(s,t.length)},m:function(e,t,r){return t==="mo"?r.ordinalNumber(e.getMinutes(),{unit:"minute"}):Z.m(e,t)},s:function(e,t,r){return t==="so"?r.ordinalNumber(e.getSeconds(),{unit:"second"}):Z.s(e,t)},S:function(e,t){return Z.S(e,t)},X:function(e,t,r){let s=e.getTimezoneOffset();if(s===0)return"Z";switch(t){case"X":return Zs(s);case"XXXX":case"XX":return ce(s);case"XXXXX":case"XXX":default:return ce(s,":")}},x:function(e,t,r){let s=e.getTimezoneOffset();switch(t){case"x":return Zs(s);case"xxxx":case"xx":return ce(s);case"xxxxx":case"xxx":default:return ce(s,":")}},O:function(e,t,r){let s=e.getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+Xs(s,":");case"OOOO":default:return"GMT"+ce(s,":")}},z:function(e,t,r){let s=e.getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+Xs(s,":");case"zzzz":default:return"GMT"+ce(s,":")}},t:function(e,t,r){let s=Math.trunc(+e/1e3);return A(s,t.length)},T:function(e,t,r){return A(+e,t.length)}};function Xs(e,t=""){let r=e>0?"-":"+",s=Math.abs(e),o=Math.trunc(s/60),n=s%60;return n===0?r+String(o):r+String(o)+t+A(n,2)}function Zs(e,t){return e%60===0?(e>0?"-":"+")+A(Math.abs(e)/60,2):ce(e,t)}function ce(e,t=""){let r=e>0?"-":"+",s=Math.abs(e),o=A(Math.trunc(s/60),2),n=A(s%60,2);return r+o+t+n}var eo=(e,t)=>{switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});case"PPPP":default:return t.date({width:"full"})}},to=(e,t)=>{switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});case"pppp":default:return t.time({width:"full"})}},la=(e,t)=>{let r=e.match(/(P+)(p+)?/)||[],s=r[1],o=r[2];if(!o)return eo(e,t);let n;switch(s){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;case"PPPP":default:n=t.dateTime({width:"full"});break}return n.replace("{{date}}",eo(s,t)).replace("{{time}}",to(o,t))},ro={p:to,P:la};var pa=/^D+$/,da=/^Y+$/,ha=["D","DD","YY","YYYY"];function so(e){return pa.test(e)}function oo(e){return da.test(e)}function no(e,t,r){let s=ga(e,t,r);if(console.warn(s),ha.includes(e))throw new RangeError(s)}function ga(e,t,r){let s=e[0]==="Y"?"years":"days of the month";return`Use \`${e.toLowerCase()}\` instead of \`${e}\` (in \`${t}\`) for formatting ${s} to the input \`${r}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`}var ma=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,fa=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,wa=/^'([^]*?)'?$/,ya=/''/g,ba=/[a-zA-Z]/;function Je(e,t,r){var m,w,k,y,_,O,v,G,C,Y,N,j,W,U,B,ee,re,le;let s=te(),o=(w=(m=r==null?void 0:r.locale)!=null?m:s.locale)!=null?w:Ut,n=(Y=(C=(O=(_=r==null?void 0:r.firstWeekContainsDate)!=null?_:(y=(k=r==null?void 0:r.locale)==null?void 0:k.options)==null?void 0:y.firstWeekContainsDate)!=null?O:s.firstWeekContainsDate)!=null?C:(G=(v=s.locale)==null?void 0:v.options)==null?void 0:G.firstWeekContainsDate)!=null?Y:1,i=(le=(re=(U=(W=r==null?void 0:r.weekStartsOn)!=null?W:(j=(N=r==null?void 0:r.locale)==null?void 0:N.options)==null?void 0:j.weekStartsOn)!=null?U:s.weekStartsOn)!=null?re:(ee=(B=s.locale)==null?void 0:B.options)==null?void 0:ee.weekStartsOn)!=null?le:0,c=D(e,r==null?void 0:r.in);if(!$s(c))throw new RangeError("Invalid time value");let u=t.match(fa).map(x=>{let F=x[0];if(F==="p"||F==="P"){let ye=ro[F];return ye(x,o.formatLong)}return x}).join("").match(ma).map(x=>{if(x==="''")return{isToken:!1,value:"'"};let F=x[0];if(F==="'")return{isToken:!1,value:Ta(x)};if(Mt[F])return{isToken:!0,value:x};if(F.match(ba))throw new RangeError("Format string contains an unescaped latin alphabet character `"+F+"`");return{isToken:!1,value:x}});o.localize.preprocessor&&(u=o.localize.preprocessor(c,u));let p={firstWeekContainsDate:n,weekStartsOn:i,locale:o};return u.map(x=>{if(!x.isToken)return x.value;let F=x.value;(!(r!=null&&r.useAdditionalWeekYearTokens)&&oo(F)||!(r!=null&&r.useAdditionalDayOfYearTokens)&&so(F))&&no(F,t,String(e));let ye=Mt[F[0]];return ye(c,F,o.localize,p)}).join("")}function Ta(e){let t=e.match(wa);return t?t[1].replace(ya,"'"):e}function L(e,t="normal"){if(e==null)throw new Error("Input cannot be null or undefined");return t==="disabled"?e:t==="strict"?e.replace(/[^a-zA-Z0-9\s.,()/[\]*+-:"#!'?&|*>~^]/g,"").replace(/---/g,"- - -"):t==="veryStrict"?e.replace(/[^a-zA-Z0-9\s.,?]/g,""):e.replace(/<%/g,"'<<'").replace(/%>/g,"'>>'").replace(/`/g,'"').replace(/---/g,"- - -").replace(/{{/g,"((").replace(/}}/g,"))")}function ue(e){let t={},r=e.match(/^---\n([\s\S]*?)\n---/);if(!r)return t;let o=r[1].split(`
`);for(let n of o){let[i,...c]=n.split(":");if(!i||!c.length)continue;let u=c.join(":").trim();u&&(t[i.trim()]=u)}return t}function $t(e){return`---
${Object.entries(e).map(([r,s])=>`${r}: ${s}`).join(`
`)}
---
`}var Qe=class{constructor(t,r,s,o){this.app=t;this.settings=r;this.noticeManager=s;this.gitHubClient=o}async createIssueFiles(t,r,s){let[o,n]=t.repository.split("/");if(!o||!n)return;let i=n.replace(/\//g,"-"),c=o.replace(/\//g,"-");await this.cleanupDeletedIssues(t,c,i,s);for(let u of r)await this.createOrUpdateIssueFile(t,c,i,u)}async createPullRequestFiles(t,r,s){let[o,n]=t.repository.split("/");if(!o||!n)return;let i=n.replace(/\//g,"-"),c=o.replace(/\//g,"-");await this.cleanupDeletedPullRequests(t,c,i,s);for(let u of r)await this.createOrUpdatePullRequestFile(t,c,i,u)}filterIssues(t,r){return r.filter(s=>{var o;if(!t.requireAssignee&&!t.requireOpenedByIssue)return!0;if(t.requireAssignee){let n=((o=s.assignees)==null?void 0:o.map(i=>i.login))||[];if(t.assigneeMatch&&n.length>0&&n.some(i=>i.toLowerCase()===t.assigneeMatch.toLowerCase()))return!0}return!!(t.requireOpenedByIssue&&t.openedByIssueMatch&&s.user.login&&s.user&&s.user.login.toLowerCase()==t.openedByIssueMatch.toLowerCase())})}filterPullRequests(t,r){return r.filter(s=>{var o,n;if(!t.requireReviewer&&!t.requirePullRequestAssignee&&!t.requireOpenedByPR)return!0;if(t.requireReviewer){let i=((o=s.requested_reviewers)==null?void 0:o.map(c=>c.login))||[];if(t.reviewerMatch&&i.length>0&&i.some(c=>c.toLowerCase()===t.reviewerMatch.toLowerCase()))return!0}if(t.requirePullRequestAssignee){let i=((n=s.assignees)==null?void 0:n.map(c=>c.login))||[];if(t.pullRequestAssigneeMatch&&i.length>0&&i.some(c=>c.toLowerCase()===t.pullRequestAssigneeMatch.toLowerCase()))return!0}return!!(t.requireOpenedByPR&&t.openedByPRMatch&&s.user.login&&s.user&&s.user.login.toLowerCase()==t.openedByPRMatch.toLowerCase())})}async cleanupEmptyFolders(){try{for(let t of this.settings.repositories){let[r,s]=t.repository.split("/");if(!r||!s)continue;let o=s.replace(/\//g,"-"),n=r.replace(/\//g,"-"),i=`${t.issueFolder}/${n}/${o}`,c=`${t.pullRequestFolder}/${n}/${o}`;await this.cleanupEmptyIssueFolder(t,i,n),await this.cleanupEmptyPullRequestFolder(t,c,n)}}catch(t){this.noticeManager.error("Error cleaning up empty folders",t)}}async cleanupDeletedIssues(t,r,s,o){if(this.app.vault.getAbstractFileByPath(`${t.issueFolder}/${r}/${s}`)){let i=this.app.vault.getFiles().filter(c=>c.path.startsWith(`${t.issueFolder}/${r}/${s}/`)&&c.extension==="md");for(let c of i){let u=c.name.replace(".md","").replace("Issue - ","");if(!o.has(u)){let p=await this.app.vault.read(c),m=ue(p);(m.allowDelete?m.allowDelete.toLowerCase().replace('"',"")==="true":t.allowDeleteIssue)&&(await this.app.fileManager.trashFile(c),this.noticeManager.info(`Deleted issue ${u} as it no longer exists in ${t.repository}`))}}}}async cleanupDeletedPullRequests(t,r,s,o){if(this.app.vault.getAbstractFileByPath(`${t.pullRequestFolder}/${r}/${s}`)){let i=this.app.vault.getFiles().filter(c=>c.path.startsWith(`${t.pullRequestFolder}/${r}/${s}/`)&&c.extension==="md");for(let c of i){let u=c.name.replace(".md","").replace("Pull Request - ","");if(!o.has(u)){let p=await this.app.vault.read(c),m=ue(p);(m.allowDelete?m.allowDelete.toLowerCase().replace('"',"")==="true":t.allowDeletePullRequest)&&(await this.app.fileManager.trashFile(c),this.noticeManager.info(`Deleted pull request ${u} as it no longer exists in ${t.repository}`))}}}}async createOrUpdateIssueFile(t,r,s,o){var w;let n=`Issue - ${o.number}.md`;await this.ensureFolderExists(t.issueFolder),await this.ensureFolderExists(`${t.issueFolder}/${r}`),await this.ensureFolderExists(`${t.issueFolder}/${r}/${s}`);let i=this.app.vault.getAbstractFileByPath(`${t.issueFolder}/${r}/${s}/${n}`),[c,u]=t.repository.split("/"),p=await this.gitHubClient.fetchIssueComments(c,u,o.number),m=this.createIssueContent(o,t,p);if(i){if(i instanceof z.TFile){let k=await this.app.vault.read(i),y=ue(k);y.assignees=((w=o.assignees)==null?void 0:w.map(v=>v.login))||[];let _=y.updateMode;_||this.noticeManager.warning(`No valid update mode found for issue ${o.number}. Using repository setting.`);let O=_?_.toLowerCase().replace('"',""):t.issueUpdateMode;if(O==="update")m=`${$t(y)}

# ${L(o.title,this.settings.escapeMode)}
${o.body?L(o.body,this.settings.escapeMode):"No description found"}
`,p.length>0&&(m+=this.formatComments(p,this.settings.escapeMode)),await this.app.vault.modify(i,m),this.noticeManager.debug(`Updated issue ${o.number}`);else if(O==="append"){m=`---
### New status: "${o.state}"

# ${L(o.title,this.settings.escapeMode)}
${o.body?L(o.body,this.settings.escapeMode):"No description found"}
`,p.length>0&&(m+=this.formatComments(p,this.settings.escapeMode));let v=k+`

`+m;await this.app.vault.modify(i,v),this.noticeManager.debug(`Appended content to issue ${o.number}`)}else this.noticeManager.debug(`Skipped update for issue ${o.number} (mode: ${O})`)}}else await this.app.vault.create(`${t.issueFolder}/${r}/${s}/${n}`,m),this.noticeManager.debug(`Created issue file for ${o.number}`)}async createOrUpdatePullRequestFile(t,r,s,o){var w,k;let n=`Pull Request - ${o.number}.md`;await this.ensureFolderExists(t.pullRequestFolder),await this.ensureFolderExists(`${t.pullRequestFolder}/${r}`),await this.ensureFolderExists(`${t.pullRequestFolder}/${r}/${s}`);let i=this.app.vault.getAbstractFileByPath(`${t.pullRequestFolder}/${r}/${s}/${n}`),[c,u]=t.repository.split("/"),p=await this.gitHubClient.fetchPullRequestComments(c,u,o.number),m=this.createPullRequestContent(o,t,p);if(i){if(i instanceof z.TFile){let y=await this.app.vault.read(i),_=ue(y);_.assignees=((w=o.assignees)==null?void 0:w.map(G=>G.login))||[],_.requested_reviewers=((k=o.requested_reviewers)==null?void 0:k.map(G=>G.login))||[];let O=_.updateMode;O||this.noticeManager.warning(`No valid update mode found for PR ${o.number}. Using repository setting.`);let v=O?O.toLowerCase().replace('"',""):t.pullRequestUpdateMode;if(v==="update")m=`${$t(_)}

# ${L(o.title,this.settings.escapeMode)}
${o.body?L(o.body,this.settings.escapeMode):"No description found"}
`,p.length>0&&(m+=this.formatComments(p,this.settings.escapeMode)),await this.app.vault.modify(i,m),this.noticeManager.debug(`Updated PR ${o.number}`);else if(v==="append"){m=`---
### New status: "${o.state}"

# ${L(o.title,this.settings.escapeMode)}
${o.body?L(o.body,this.settings.escapeMode):"No description found"}
`,p.length>0&&(m+=this.formatComments(p,this.settings.escapeMode));let G=y+`

`+m;await this.app.vault.modify(i,G),this.noticeManager.debug(`Appended content to PR ${o.number}`)}else this.noticeManager.debug(`Skipped update for PR ${o.number} (mode: ${v})`)}}else await this.app.vault.create(`${t.pullRequestFolder}/${r}/${s}/${n}`,m),this.noticeManager.debug(`Created PR file for ${o.number}`)}async ensureFolderExists(t){this.app.vault.getAbstractFileByPath(t)||(await this.app.vault.createFolder(t),this.noticeManager.debug(`Created folder: ${t}`))}createIssueContent(t,r,s){var o,n;return`---
title: "${L(t.title,this.settings.escapeMode)}"
status: "${t.state}"
created: "${this.settings.dateFormat!==""?Je(new Date(t.created_at),this.settings.dateFormat):new Date(t.created_at).toLocaleString()}"
url: "${t.html_url}"
opened_by: "${(o=t.user)==null?void 0:o.login}"
assignees: [${(((n=t.assignees)==null?void 0:n.map(i=>'"'+i.login+'"'))||[]).join(", ")}]
updateMode: "${r.issueUpdateMode}"
allowDelete: ${!!r.allowDeleteIssue}
---

# ${L(t.title,this.settings.escapeMode)}
${t.body?L(t.body,this.settings.escapeMode):"No description found"}

${this.formatComments(s,this.settings.escapeMode)}
`}createPullRequestContent(t,r,s){var o,n,i;return`---
title: "${L(t.title,this.settings.escapeMode)}"
status: "${t.state}"
created: "${this.settings.dateFormat!==""?Je(new Date(t.created_at),this.settings.dateFormat):new Date(t.created_at).toLocaleString()}"
url: "${t.html_url}"
opened_by: "${(o=t.user)==null?void 0:o.login}"
assignees: [${(((n=t.assignees)==null?void 0:n.map(c=>'"'+c.login+'"'))||[]).join(", ")}]
requested_reviewers: [${(((i=t.requested_reviewers)==null?void 0:i.map(c=>'"'+c.login+'"'))||[]).join(", ")}]
updateMode: "${r.pullRequestUpdateMode}"
allowDelete: ${!!r.allowDeletePullRequest}
---

# ${L(t.title,this.settings.escapeMode)}
${t.body?L(t.body,this.settings.escapeMode):"No description found"}

${this.formatComments(s,this.settings.escapeMode)}
`}async cleanupEmptyIssueFolder(t,r,s){let o=this.app.vault.getAbstractFileByPath(r);if(o instanceof z.TFolder){let n=o.children;if(!t.trackIssues){for(let c of n)if(c instanceof z.TFile){let u=await this.app.vault.read(c),p=ue(u);(p.allowDelete?p.allowDelete.toLowerCase().replace('"',"")==="true":!1)&&(await this.app.fileManager.trashFile(c),this.noticeManager.debug(`Deleted file ${c.name} from untracked repo`),n.splice(n.indexOf(c),1))}}if(n.length===0){this.noticeManager.info(`Deleting empty folder: ${r}`);let c=this.app.vault.getAbstractFileByPath(r);c instanceof z.TFolder&&c.children.length===0&&await this.app.vault.delete(c,!0)}let i=this.app.vault.getAbstractFileByPath(`${t.issueFolder}/${s}`);i instanceof z.TFolder&&i.children.length===0&&(this.noticeManager.info(`Deleting empty folder: ${i.path}`),await this.app.vault.delete(i,!0))}}async cleanupEmptyPullRequestFolder(t,r,s){let o=this.app.vault.getAbstractFileByPath(r);if(o instanceof z.TFolder){let n=o.children;if(!t.trackPullRequest){for(let c of n)if(c instanceof z.TFile){let u=await this.app.vault.read(c),p=ue(u);(p.allowDelete?p.allowDelete.toLowerCase().replace('"',"")==="true":!1)&&(await this.app.fileManager.trashFile(c),this.noticeManager.debug(`Deleted file ${c.name} from untracked repo`),n.splice(n.indexOf(c),1))}}if(n.length===0){this.noticeManager.info(`Deleting empty folder: ${r}`);let c=this.app.vault.getAbstractFileByPath(r);c instanceof z.TFolder&&c.children.length===0&&await this.app.vault.delete(c,!0)}let i=this.app.vault.getAbstractFileByPath(`${t.pullRequestFolder}/${s}`);i instanceof z.TFolder&&i.children.length===0&&(this.noticeManager.info(`Deleting empty folder: ${i.path}`),await this.app.vault.delete(i,!0))}}formatComments(t,r){if(!t||t.length===0)return"";t.sort((o,n)=>new Date(o.created_at).getTime()-new Date(n.created_at).getTime());let s=`
## Comments

`;return t.forEach(o=>{var c;let n=this.settings.dateFormat!==""?Je(new Date(o.created_at),this.settings.dateFormat):new Date(o.created_at).toLocaleString(),i=((c=o.user)==null?void 0:c.login)||"Unknown User";o.is_review_comment?s+=`### ${i} commented on line ${o.line||"N/A"} of file \`${o.path||"unknown"}\` (${n}):

`:s+=`### ${i} commented (${n}):

`,s+=`${L(o.body||"No content",r)}

---

`}),s}};var S=require("obsidian"),Xe=class extends S.PluginSettingTab{constructor(r,s){super(r,s);this.plugin=s}display(){let{containerEl:r}=this;r.empty(),r.addClass("github-tracker"),new S.Setting(r).setName("GitHub token").setDesc("Your GitHub personal access token").addText(y=>y.setPlaceholder("Enter your GitHub token").setValue(this.plugin.settings.githubToken).onChange(async _=>{this.plugin.settings.githubToken=_,await this.plugin.saveSettings()}));let s=r.createEl("p",{text:"Please limit the token to the minimum permissions needed. For more information. Requirements are Issues, Pull Requests, and Repositories. Read more "});s.addClass("github-tracker-info-text"),new S.Setting(r).setName("Sync on startup").setDesc("Automatically sync issues and pull requests when Obsidian starts").addToggle(y=>y.setValue(this.plugin.settings.syncOnStartup).onChange(async _=>{this.plugin.settings.syncOnStartup=_,await this.plugin.saveSettings()})),new S.Setting(r).setName("Sync notice mode").setDesc("Control the level of notifications shown during sync").addDropdown(y=>{y.addOption("minimal","Minimal").addOption("normal","Normal").addOption("extensive","Extensive").addOption("debug","Debug").setValue(this.plugin.settings.syncNoticeMode).onChange(async _=>{this.plugin.settings.syncNoticeMode=_,await this.plugin.saveSettings()})}),new S.Setting(r).setName("Date format").setDesc("Format for dates in issue files (e.g., yyyy-MM-dd HH:mm:ss)").addText(y=>y.setPlaceholder("yyyy-MM-dd HH:mm:ss").setValue(this.plugin.settings.dateFormat).onChange(async _=>{this.plugin.settings.dateFormat=_,await this.plugin.saveSettings()})),new S.Setting(r).setName("Body content escaping").setDesc("Choose how to handle Templater, Dataview and other plugin escaping in issue and pull request bodies.").addDropdown(y=>y.addOption("disabled","Disabled - No escaping (may allow malicious content)").addOption("normal","Normal - Basic escaping for plugins like templater and dataview").addOption("strict","Strict - Only alphanumeric characters and links will be allowed").addOption("veryStrict","Very strict - Only alphanumeric characters, and punctuation").setValue(this.plugin.settings.escapeMode).onChange(async _=>{if(_==="disabled"){let O=new S.Modal(this.app);O.titleEl.setText("Security Warning"),O.contentEl.setText("Disabling body content escaping may allow malicious scripts to execute in your vault. Are you sure you want to continue?");let v=O.contentEl.createDiv();v.addClass("github-tracker-button-container");let G=v.createEl("button");G.setText("Cancel"),G.onclick=()=>{y.setValue("strict"),O.close()};let C=v.createEl("button");C.setText("Continue"),C.addClass("mod-warning"),C.onclick=async()=>{this.plugin.settings.escapeMode=_,await this.plugin.saveSettings(),O.close()},O.open();return}this.plugin.settings.escapeMode=_,await this.plugin.saveSettings()}));let o=r.createEl("p",{text:"CAUTION: especially if using Plugins that enable script execution. In disabled mode, no escaping will be done. "});o.addClass("github-tracker-info-text"),o.addClass("github-tracker-warning-text"),r.createEl("p",{text:"In normal mode '`', '{{', '}}', '<%' and '%>' will be escaped. (This has the side effect of not allowing code blocks to be rendered)"}).addClass("github-tracker-info-text"),r.createEl("p",{text:`In strict mode only alphanumeric characters, '.,'()/[]{}*+-:"' and whitespace will be allowed. This will remove any html like rendering and templating, but persist links`}).addClass("github-tracker-info-text"),r.createEl("p",{text:"In very strict mode only alphanumeric characters, and '.,' or whitespace will be allowed. This will remove any html like rendering and templating."}).addClass("github-tracker-info-text");let u=s.createEl("a",{text:"here"});u.addClass("github-tracker-info-link"),u.href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token",u.target="_blank",r.createEl("hr");let p=r.createDiv();new S.Setting(p).setName("Repositories").setHeading(),new S.Setting(p).setName("Add repository").setDesc("Add a repository from GitHub or manually").addButton(y=>{y.setButtonText("Add"),y.onClick(async()=>{this.showAddRepositoryModal()})});let m=p.createDiv();new S.Setting(m).setName("Search repositories").setDesc("Filter repositories by name or owner").addText(y=>y.setPlaceholder("Search repositories...").onChange(_=>{let O=_.toLowerCase(),v=p.querySelectorAll(".github-tracker-repo-settings"),G=0;v.forEach(C=>{var N;(((N=C.getAttribute("data-repo-name"))==null?void 0:N.toLowerCase())||"").includes(O)?(C.classList.remove("github-tracker-hidden"),G++):C.classList.add("github-tracker-hidden")}),k.classList.toggle("github-tracker-hidden",G>0)})),p.createEl("hr").addClass("github-tracker-small-divider");let k=p.createEl("p",{text:"No repositories found. Please add a repository to get started."});k.classList.toggle("github-tracker-hidden",this.plugin.settings.repositories.length>0),this.renderRepositoriesList(p)}showAddRepositoryModal(){let r=new S.Modal(this.app);r.titleEl.setText("Add repository");let s=r.contentEl.createDiv();s.addClass("github-tracker-form-container");let o=s.createDiv();o.addClass("github-tracker-tabs-container");let n=o.createEl("button");n.setText("Manual Entry"),n.addClass("mod-cta");let i=o.createEl("button");i.setText("From GitHub");let c=s.createDiv();c.addClass("github-tracker-tab-content"),c.addClass("active");let u=s.createDiv();u.addClass("github-tracker-tab-content");let p=c.createDiv();p.addClass("github-tracker-manual-form-container");let m=p.createDiv();m.addClass("github-tracker-container"),m.createEl("label",{text:"Repository (owner/name)"});let w=m.createEl("input");w.type="text",w.placeholder="e.g., owner/repo-name";let k=u.createDiv();k.addClass("github-tracker-list"),n.onclick=()=>{n.addClass("mod-cta"),i.removeClass("mod-cta"),c.addClass("active"),u.removeClass("active"),y.addClass("github-tracker-visible-flex"),y.removeClass("github-tracker-hidden")},i.onclick=async()=>{i.addClass("mod-cta"),n.removeClass("mod-cta"),c.removeClass("active"),u.addClass("active"),y.addClass("github-tracker-hidden"),y.removeClass("github-tracker-visible-flex"),await this.renderGitHubRepositories(k)};let y=s.createDiv();y.addClass("github-tracker-button-container");let _=y.createEl("button");_.setText("Cancel"),_.onclick=()=>r.close();let O=y.createEl("button");O.setText("Add"),O.onclick=async()=>{let v=w.value.trim();if(!v){new S.Notice("Please enter both owner and repository name");return}await this.addRepository(v),r.close()},r.open()}async renderGitHubRepositories(r){r.empty(),r.createEl("p",{text:"Loading repositories..."});try{let s=await this.plugin.fetchAvailableRepositories();r.empty();for(let o of s){let n=`${o.owner.login}/${o.name}`,i=this.plugin.settings.repositories.some(p=>p.repository===n),c=r.createDiv();if(c.addClass("github-tracker-item"),c.createEl("span").setText(n),i){let p=c.createEl("span");p.setText("Already tracked"),p.addClass("github-tracker-info-text")}else{let p=c.createEl("button");p.setText("Add"),p.onclick=async()=>{await this.addRepository(n),this.display(),c.classList.add("github-tracker-hidden")}}}}catch(s){r.empty(),r.createEl("p",{text:`Error loading repositories: ${s.message}`})}}async addRepository(r){if(this.plugin.settings.repositories.some(s=>s.repository===r)){new S.Notice("This repository is already being tracked");return}this.plugin.settings.repositories.push({repository:r,trackIssues:!1,issueUpdateMode:"none",allowDeleteIssue:!0,issueFolder:"GitHub Issues",trackPullRequest:!1,pullRequestFolder:"GitHub Pull Requests",pullRequestUpdateMode:"none",allowDeletePullRequest:!0,requireAssignee:!1,requireReviewer:!1,assigneeMatch:"",reviewerMatch:"",pullRequestAssigneeMatch:"",requirePullRequestAssignee:!1,requireOpenedByIssue:!1,openedByIssueMatch:"",requireOpenedByPR:!1,openedByPRMatch:""}),await this.plugin.saveSettings(),this.display(),new S.Notice(`Added repository: ${r}`)}renderRepositoriesList(r){let s=r.createDiv("github-tracker-repos-container");for(let o of this.plugin.settings.repositories){let n=s.createDiv("github-tracker-repo-settings");n.setAttribute("data-repo-name",o.repository);let i=n.createDiv("github-tracker-repo-header");new S.Setting(i).setName("Repository: "+o.repository).setHeading();let u=i.createDiv("github-tracker-repo-actions").createEl("button");u.setText("Delete"),u.addClass("mod-warning"),u.onclick=async()=>{await this.showDeleteRepositoryModal(o)},n.createEl("p",{text:"Configure tracking settings for this repository"}).addClass("setting-item-description");let p=n.createDiv("github-tracker-settings-section"),m=n.createDiv("github-tracker-settings-section");this.renderIssueSettings(p,o),this.renderPullRequestSettings(m,o),n.createEl("hr").addClass("github-tracker-small-divider")}}async showDeleteRepositoryModal(r){let s=new S.Modal(this.app);s.titleEl.setText("Delete Repository"),s.contentEl.setText(`Are you sure you want to delete ${r.repository}? This will remove all tracking settings for this repository.`);let o=s.contentEl.createDiv();o.addClass("github-tracker-button-container");let n=o.createEl("button");n.setText("Cancel"),n.onclick=()=>s.close();let i=o.createEl("button");i.setText("Delete"),i.addClass("mod-warning"),i.onclick=async()=>{this.plugin.settings.repositories=this.plugin.settings.repositories.filter(c=>c.repository!==r.repository),await this.plugin.saveSettings(),this.display(),s.close(),new S.Notice(`Deleted repository: ${r.repository}`)},s.open()}renderIssueSettings(r,s){new S.Setting(r).setName("Issues").setHeading(),r.createEl("p",{text:"Configure how issues are tracked and stored"}).addClass("setting-item-description"),new S.Setting(r).setName("Track issues").setDesc("Enable or disable issue tracking for this repository").addToggle(c=>c.setValue(s.trackIssues).onChange(async u=>{s.trackIssues=u,o.classList.toggle("github-tracker-settings-hidden",!u),await this.plugin.saveSettings()}));let o=r.createDiv("github-tracker-settings-group");o.classList.toggle("github-tracker-settings-hidden",!s.trackIssues),new S.Setting(o).setName("Issues folder").setDesc("The folder where issue files will be stored").addText(c=>c.setPlaceholder("GitHub Issues").setValue(s.issueFolder).onChange(async u=>{s.issueFolder=u,await this.plugin.saveSettings()})),new S.Setting(o).setName("Issue update mode").setDesc("How to handle updates to existing issues").addDropdown(c=>c.addOption("none","None - Don't update existing issues").addOption("update","Update - Overwrite existing content").addOption("append","Append - Add new content at the end").setValue(s.issueUpdateMode).onChange(async u=>{s.issueUpdateMode=u,await this.plugin.saveSettings()})),new S.Setting(o).setName("Default: Allow issue deletion").setDesc("If enabled, issue files will be set to be deleted from your vault when the issue is closed or no longer matches your filter criteria").addToggle(c=>c.setValue(s.allowDeleteIssue).onChange(async u=>{s.allowDeleteIssue=u,await this.plugin.saveSettings()})),new S.Setting(o).setName("Require assignee").setDesc("Only track issues that have at least one assignee").addToggle(c=>c.setValue(s.requireAssignee).onChange(async u=>{s.requireAssignee=u,n.settingEl.classList.toggle("github-tracker-settings-hidden",!u),await this.plugin.saveSettings()}));let n=new S.Setting(o).setName("Assignee match").setDesc("Only track issues assigned to this specific GitHub username (case-insensitive). Disable to track all assignees").addText(c=>c.setPlaceholder("GitHub username").setValue(s.assigneeMatch).onChange(async u=>{s.assigneeMatch=u,await this.plugin.saveSettings()}));n.settingEl.classList.toggle("github-tracker-settings-hidden",!s.requireAssignee),new S.Setting(o).setName("Require opened by").setDesc("Only track issues that were opened by a specific user").addToggle(c=>c.setValue(s.requireOpenedByIssue).onChange(async u=>{s.requireOpenedByIssue=u,i.settingEl.classList.toggle("github-tracker-settings-hidden",!u),await this.plugin.saveSettings()}));let i=new S.Setting(o).setName("Opened by").setDesc("Only track issues opened by this specific GitHub username (case-insensitive)").addText(c=>c.setPlaceholder("GitHub username").setValue(s.openedByIssueMatch).onChange(async u=>{s.openedByIssueMatch=u,await this.plugin.saveSettings()}));i.settingEl.classList.toggle("github-tracker-settings-hidden",!s.requireOpenedByIssue)}renderPullRequestSettings(r,s){new S.Setting(r).setName("Pull requests").setHeading(),r.createEl("p",{text:"Configure how pull requests are tracked and stored"}).addClass("setting-item-description"),new S.Setting(r).setName("Track pull requests").setDesc("Enable or disable pull request tracking for this repository").addToggle(u=>u.setValue(s.trackPullRequest).onChange(async p=>{s.trackPullRequest=p,o.classList.toggle("github-tracker-settings-hidden",!p),await this.plugin.saveSettings()}));let o=r.createDiv("github-tracker-settings-group");o.classList.toggle("github-tracker-settings-hidden",!s.trackPullRequest),new S.Setting(o).setName("Pull requests folder").setDesc("The folder where pull request files will be stored").addText(u=>u.setPlaceholder("GitHub Pull Requests").setValue(s.pullRequestFolder).onChange(async p=>{s.pullRequestFolder=p,await this.plugin.saveSettings()})),new S.Setting(o).setName("Pull request update mode").setDesc("How to handle updates to existing pull requests").addDropdown(u=>u.addOption("none","None - Don't update existing pull requests").addOption("update","Update - Overwrite existing content").addOption("append","Append - Add new content at the end").setValue(s.pullRequestUpdateMode).onChange(async p=>{s.pullRequestUpdateMode=p,await this.plugin.saveSettings()})),new S.Setting(o).setName("Default: Allow pull request deletion").setDesc("If enabled, pull request files will be set to be deleted from your vault when the pull request is closed or no longer matches your filter criteria").addToggle(u=>u.setValue(s.allowDeletePullRequest).onChange(async p=>{s.allowDeletePullRequest=p,await this.plugin.saveSettings()})),new S.Setting(o).setName("Require reviewer").setDesc("Only track pull requests that have at least one requested reviewer").addToggle(u=>u.setValue(s.requireReviewer).onChange(async p=>{s.requireReviewer=p,n.settingEl.classList.toggle("github-tracker-settings-hidden",!p),await this.plugin.saveSettings()}));let n=new S.Setting(o).setName("Reviewer match").setDesc("Only track pull requests with this specific GitHub username as a reviewer (case-insensitive). Leave empty to track all reviewers.").addText(u=>u.setPlaceholder("GitHub username").setValue(s.reviewerMatch).onChange(async p=>{s.reviewerMatch=p,await this.plugin.saveSettings()}));n.settingEl.classList.toggle("github-tracker-settings-hidden",!s.requireReviewer),new S.Setting(o).setName("Require assignee").setDesc("Only track pull requests that have at least one assignee").addToggle(u=>u.setValue(s.requirePullRequestAssignee).onChange(async p=>{s.requirePullRequestAssignee=p,i.settingEl.classList.toggle("github-tracker-settings-hidden",!p),await this.plugin.saveSettings()}));let i=new S.Setting(o).setName("Assignee match").setDesc("Only track pull requests assigned to this specific GitHub username (case-insensitive). Disable to track all assignees.").addText(u=>u.setPlaceholder("GitHub username").setValue(s.pullRequestAssigneeMatch).onChange(async p=>{s.pullRequestAssigneeMatch=p,await this.plugin.saveSettings()}));i.settingEl.classList.toggle("github-tracker-settings-hidden",!s.requirePullRequestAssignee),new S.Setting(o).setName("Require opened by").setDesc("Only track pull requests that were opened by a specific user").addToggle(u=>u.setValue(s.requireOpenedByPR).onChange(async p=>{s.requireOpenedByPR=p,c.settingEl.classList.toggle("github-tracker-settings-hidden",!p),await this.plugin.saveSettings()}));let c=new S.Setting(o).setName("Opened by").setDesc("Only track pull requests opened by this specific GitHub username (case-insensitive)").addText(u=>u.setPlaceholder("GitHub username").setValue(s.openedByPRMatch).onChange(async p=>{s.openedByPRMatch=p,await this.plugin.saveSettings()}));c.settingEl.classList.toggle("github-tracker-settings-hidden",!s.requireOpenedByPR)}};var io=require("obsidian"),Pe=class{constructor(t){this.settings=t}showNotice(t,r="info",s=!1){if(this.settings.syncNoticeMode==="debug"){let n=`[GitHub Tracker] ${r.toUpperCase()}:`;r==="error"?console.error(n,t):r==="warning"?console.warn(n,t):console.log(n,t)}let o=s;if(!o)switch(this.settings.syncNoticeMode){case"minimal":o=r==="error";break;case"normal":o=r==="error"||r==="warning"||r==="success";break;case"extensive":o=r!=="debug";break;case"debug":o=!0;break}o&&new io.Notice(t)}debug(t){this.settings.syncNoticeMode==="debug"&&this.showNotice(t,"debug")}error(t,r){let s=t;r instanceof Error&&(s+=`: ${r.message}`,this.settings.syncNoticeMode==="debug"&&console.error("[GitHub Tracker] ERROR:",r)),this.showNotice(s,"error")}warning(t){this.showNotice(t,"warning")}info(t){this.showNotice(t,"info")}success(t){this.showNotice(t,"success")}};var Ze=class extends et.Plugin{constructor(){super(...arguments);this.settings=it;this.gitHubClient=null;this.fileManager=null;this.isSyncing=!1}async sync(){var r;if(this.isSyncing){this.noticeManager.warning("Already syncing...");return}this.isSyncing=!0;try{this.noticeManager.info("Syncing issues and pull requests"),await this.fetchIssues(),await this.fetchPullRequests(),await((r=this.fileManager)==null?void 0:r.cleanupEmptyFolders()),this.noticeManager.success("Synced issues and pull requests")}catch(s){this.noticeManager.error("Error syncing issues and pull requests",s)}this.isSyncing=!1}async onload(){var o;await this.loadSettings(),this.noticeManager=new Pe(this.settings),this.gitHubClient=new Be(this.settings,this.noticeManager),this.fileManager=new Qe(this.app,this.settings,this.noticeManager,this.gitHubClient),this.settings.syncOnStartup&&((o=this.gitHubClient)!=null&&o.isReady())&&new Promise(n=>setTimeout(n,750)).then(async()=>{await this.sync()}),this.addRibbonIcon("sync","GitHub Tracker",async n=>{var i;if(!((i=this.gitHubClient)!=null&&i.isReady())){new et.Notice("Please set your GitHub token in settings first");return}await this.sync()}).addClass("github-tracker-ribbon-class"),this.addStatusBarItem().setText("GitHub Tracker"),this.addCommand({id:"sync-github-issues-pull-requests",name:"Sync GitHub Issues & Pull Requests",callback:()=>{this.sync()}}),this.addSettingTab(new Xe(this.app,this))}onunload(){var r;(r=this.gitHubClient)==null||r.dispose()}async loadSettings(){this.settings=Object.assign({},it,await this.loadData())}async saveSettings(){var r;await this.saveData(this.settings),this.settings.githubToken&&((r=this.gitHubClient)==null||r.initializeClient()),this.noticeManager&&(this.noticeManager=new Pe(this.settings))}async fetchAvailableRepositories(){if(!this.gitHubClient)return this.noticeManager.error("GitHub client not initialized"),[];if(!this.settings.githubToken)return this.noticeManager.error("No GitHub token provided. Please add your GitHub token in the settings."),[];try{return await this.gitHubClient.initializeClient(this.settings.githubToken),await this.gitHubClient.fetchAvailableRepositories()}catch(r){return this.noticeManager.error("Error fetching available repositories",r),[]}}async fetchIssues(){if(!this.gitHubClient||!this.fileManager){this.noticeManager.error("GitHub client or file manager not initialized");return}try{for(let r of this.settings.repositories){if(!r.trackIssues)continue;let[s,o]=r.repository.split("/");if(!s||!o)continue;this.noticeManager.debug(`Fetching issues for ${r.repository}`);let n=await this.gitHubClient.fetchRepositoryIssues(s,o),i=this.fileManager.filterIssues(r,n);this.noticeManager.debug(`Found ${n.length} issues, ${i.length} match filters`);let c=new Set(i.map(u=>u.number.toString()));await this.fileManager.createIssueFiles(r,i,c),this.noticeManager.debug(`Synced ${i.length} issues for ${r.repository}`)}}catch(r){this.noticeManager.error("Error fetching GitHub issues",r)}}async fetchPullRequests(){if(!this.gitHubClient||!this.fileManager){this.noticeManager.error("GitHub client or file manager not initialized");return}try{for(let r of this.settings.repositories){if(!r.trackPullRequest)continue;let[s,o]=r.repository.split("/");if(!s||!o)continue;this.noticeManager.debug(`Fetching pull requests for ${r.repository}`);let n=await this.gitHubClient.fetchRepositoryPullRequests(s,o),i=this.fileManager.filterPullRequests(r,n);this.noticeManager.debug(`Found ${n.length} pull requests, ${i.length} match filters`);let c=new Set(i.map(u=>u.number.toString()));await this.fileManager.createPullRequestFiles(r,i,c),this.noticeManager.debug(`Synced ${i.length} pull requests for ${r.repository}`)}}catch(r){this.noticeManager.error("Error fetching GitHub pull requests",r)}}};
/*! Bundled license information:

toad-cache/dist/toad-cache.mjs:
  (**
   * toad-cache
   *
   * @copyright 2024 Igor Savin <kibertoad@gmail.com>
   * @license MIT
   * @version 3.7.0
   *)
*/

/* nosourcemap */