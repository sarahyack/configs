/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var c=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var l=Object.prototype.hasOwnProperty;var p=(i,e)=>{for(var t in e)c(i,t,{get:e[t],enumerable:!0})},w=(i,e,t,a)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of u(e))!l.call(i,n)&&n!==t&&c(i,n,{get:()=>e[n],enumerable:!(a=h(e,n))||a.enumerable});return i};var g=i=>w(c({},"__esModule",{value:!0}),i);var f={};p(f,{default:()=>o});module.exports=g(f);var s=require("obsidian"),m={property_name:"default-mode"};function k(i){return i==null?!0:M(i)}function M(i){switch(i){case"edit":case"preview":case"source":case"reading":return!0;default:return!1}}var o=class extends s.Plugin{async run(e){let t=e.file;if(t==null)return;let a=this.app.metadataCache.getFileCache(t);if(!a)return;let{frontmatter:n}=a;if(!n)return;let r=n[this.settings.property_name];if(!k(r)){new s.Notice(`The value of the ${this.settings.property_name} property must be one of edit, preview, source or reading`);return}r!=null&&await this.setMode(r,e)}async onload(){await this.loadSettings(),this.addCommand({id:"switch-to-live-preview",name:"Switch to live preview",checkCallback:this.makeCheckCB(e=>this.setMode("preview",e))}),this.addCommand({id:"switch-to-source",name:"Switch to source",checkCallback:this.makeCheckCB(e=>this.setMode("source",e))}),this.addCommand({id:"switch-to-edit",name:"Switch to edit",checkCallback:this.makeCheckCB(e=>this.setMode("edit",e))}),this.addCommand({id:"switch-to-reading",name:"Switch to reading",checkCallback:this.makeCheckCB(e=>this.setMode("reading",e))}),this.addCommand({id:"switch-to-next-mode",name:"Switch to next mode",checkCallback:this.makeCheckCB(e=>this.nextMode(e))}),this.registerEvent(this.app.workspace.on("active-leaf-change",e=>{let t=e==null?void 0:e.view;if(t&&t instanceof s.MarkdownView)return this.run(t)})),this.addSettingTab(new d(this.app,this))}onunload(){}async setMode(e,t){let a=t.getState();switch(e){case"edit":a.mode="source";break;case"preview":a.mode="source",a.source=!1;break;case"source":a.mode="source",a.source=!0;break;case"reading":a.mode="preview",a.source=!1;break}await t.setState(a,{history:!0}),this.app.workspace.trigger("layout-change")}async nextMode(e){let t=e.getState();t.mode==="preview"?await this.setMode("source",e):t.source===!0?await this.setMode("preview",e):await this.setMode("reading",e)}getView(){return this.app.workspace.getActiveViewOfType(s.MarkdownView)}makeCheckCB(e){return t=>{let a=this.getView();return a?(t||e(a),!0):!1}}async loadSettings(){this.settings=Object.assign({},m,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}},d=class extends s.PluginSettingTab{constructor(e,t){super(e,t),this.plugin=t}display(){let{containerEl:e}=this;e.empty(),new s.Setting(e).setName("Default mode property name").setDesc("The name of the property to configure a note's default mode").addText(t=>t.setPlaceholder("name").setValue(this.plugin.settings.property_name).onChange(async a=>{this.plugin.settings.property_name=a,await this.plugin.saveSettings()}))}};

/* nosourcemap */